diff --git a/android/app/src/main/res/values/styles.xml b/android/app/src/main/res/values/styles.xml
index 0d1fa8f..8c5c043 100644
--- a/android/app/src/main/res/values/styles.xml
+++ b/android/app/src/main/res/values/styles.xml
@@ -9,6 +9,11 @@
         <item name="android:windowFullscreen">false</item>
         <item name="android:windowDrawsSystemBarBackgrounds">false</item>
         <item name="android:windowLayoutInDisplayCutoutMode">shortEdges</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+        <item name="android:navigationBarColor">@android:color/transparent</item>
+        <item name="android:windowTranslucentStatus">true</item>
+        <item name="android:windowTranslucentNavigation">true</item>
+        <item name="android:fitsSystemWindows">false</item>
     </style>
     <!-- Theme applied to the Android Window as soon as the process has started.
          This theme determines the color of the Android Window while your
diff --git a/lib/main.dart b/lib/main.dart
index f909ca4..c5f4c58 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -17,6 +17,7 @@ import 'package:provider/provider.dart';
 import 'package:google_fonts/google_fonts.dart';
 import 'package:flutter_downloader/flutter_downloader.dart';
 import 'package:shared_preferences/shared_preferences.dart';
+import 'package:smooth_page_indicator/smooth_page_indicator.dart';
 import 'package:weather_icons/weather_icons.dart';
 import 'package:workmanager/workmanager.dart';
 import 'update_handler.dart';
@@ -288,25 +289,24 @@ class Checkers with ChangeNotifier {
 
 enum DayPhase { nightBefore, dawn, morning, noon, afternoon, sunset, night }
 
-DayPhase getDayPhase(double progress) {
-  if (progress < 0) {
-    return DayPhase.nightBefore;
-  } else if (progress <= 0.2) {
+DayPhase getDayPhase(double progress, int totalDuration) {
+  final dawnDurationMinutes = 30;
+  final dawnProgress = dawnDurationMinutes / totalDuration;
+  final sunsetDurationMinutes = 30;
+  final sunsetProgress = 1.0 + (sunsetDurationMinutes / totalDuration);
+  if (progress <= -0.0417 || progress > sunsetProgress) {
+    return DayPhase.night;
+  } else if (progress <= dawnProgress) {
     return DayPhase.dawn;
-  }
-  if (progress <= 0.5) {
+  } else if (progress <= 0.4167) {
     return DayPhase.morning;
-  }
-  if (progress < 0.625) {
+  } else if (progress <= 0.6667) {
     return DayPhase.noon;
-  }
-  if (progress < 0.75) {
+  } else if (progress <= 1.0) {
     return DayPhase.afternoon;
-  }
-  if (progress < 0.875) {
+  } else {
     return DayPhase.sunset;
   }
-  return DayPhase.night;
 }
 
 class LightState {
@@ -314,12 +314,14 @@ class LightState {
   final DateTime sunset;
   final double dayProgress;
   final Map<String, dynamic>? cachedLightStates;
+  final double totalDuration;
 
   LightState({
     required this.sunrise,
     required this.sunset,
     required this.dayProgress,
     this.cachedLightStates,
+    required this.totalDuration,
   });
 }
 
@@ -332,9 +334,13 @@ class MyHomePage extends StatefulWidget {
 
 class _MyHomePageState extends State<MyHomePage> {
   double _dayProgress = -2.0;
-  Color _mainColor = const Color.fromARGB(255, 10, 91, 119);
-  Color _titleTextColor = const Color.fromARGB(255, 244, 240, 88);
-  Color _secondaryColor = const Color.fromARGB(255, 2, 1, 34);
+  Color backgroundColor = Colors.black;
+  Color _mainColor = Colors.white;
+  Color _complementaryMainColor = Colors.white;
+  Color _titleTextColor = Colors.white;
+  Color _secondaryColor = Colors.white;
+  int? totalDuration;
+
   String _testing = "";
   Timer? _timer;
 
@@ -358,6 +364,8 @@ class _MyHomePageState extends State<MyHomePage> {
   }
 
   Future<void> _initAsyncStuff() async {
+    const maxRetries = 3;
+    const retryDelay = Duration(seconds: 2);
     final checkers = context.read<Checkers>();
     final newWeatherService = context.read<WeatherService>();
 
@@ -391,8 +399,32 @@ class _MyHomePageState extends State<MyHomePage> {
         newWeatherService.loadStation(),
       ]);
       await newWeatherService.findNerbyStation();
+
+      bool forecastSuccess = false;
+      for (int attempt = 1; attempt <= maxRetries; attempt++) {
+        try {
+          await newWeatherService.getForecast();
+          if (newWeatherService.forecastCachedData != null &&
+              newWeatherService.forecastCachedData!.containsKey(
+                "tempByHours",
+              ) &&
+              newWeatherService.forecastCachedData!["tempByHours"].isNotEmpty) {
+            forecastSuccess = true;
+            break;
+          } else {
+            if (attempt < maxRetries) {
+              debugPrint("Reintentando en ${retryDelay.inSeconds} segundos...");
+              await Future.delayed(retryDelay);
+            }
+          }
+        } catch (e) {
+          debugPrint("Error en getForecast en intento $attempt: $e");
+          if (attempt < maxRetries) {
+            await Future.delayed(retryDelay);
+          }
+        }
+      }
       await Future.wait([
-        newWeatherService.getForecast(),
         newWeatherService.fetchMetarData(),
         newWeatherService.getICA(),
       ]);
@@ -515,9 +547,30 @@ class _MyHomePageState extends State<MyHomePage> {
     });
   }
 
-  Color applyWeatherTimeToTexts(Color textColor, int weatherCode) {
+  Color applyWeatherTimeToTexts(
+    Color textColor,
+    int weatherCode,
+    double cloudCover,
+  ) {
     Color overlay;
     final weatherRange = WeatherCodesRanges(weatherCode: weatherCode);
+    double blendFactor = (weatherRange.intensity / 100.0).clamp(0.05, 0.25);
+    debugPrint("Cloudcover : $cloudCover");
+    final factor = (cloudCover / 150.0).clamp(0.0, 1.0);
+    Color complementary = Color.fromARGB(
+      (textColor.a).toInt(),
+      255 - (const Color.fromARGB(255, 255, 0, 0).r).toInt(),
+      255 - (const Color.fromARGB(255, 0, 255, 0).g).toInt(),
+      255 - (const Color.fromARGB(255, 0, 0, 255).b).toInt(),
+    );
+    Color normalizedColor = Color.lerp(
+      textColor,
+      complementary,
+      (factor - 0.5).clamp(0.0, 1.0),
+    )!;
+
+    debugPrint("El weather state es ${weatherRange.description}");
+
     switch (weatherRange.description) {
       case Condition.rain ||
           Condition.rainShowers ||
@@ -526,22 +579,31 @@ class _MyHomePageState extends State<MyHomePage> {
           Condition.freezingDrizzle ||
           Condition.thunderstorm:
         final intensity = weatherRange.intensity;
-        overlay = Color.fromARGB(intensity, 200, 180, 168);
+        overlay = Color.fromARGB(intensity.clamp(60, 120), 200, 150, 168);
 
       case Condition.snowFall || Condition.snowGrains || Condition.snowShowers:
         final intensity = weatherRange.intensity;
-        overlay = Color.fromARGB(intensity, 200, 180, 168);
+        overlay = Color.fromARGB(intensity.clamp(60, 120), 200, 150, 168);
 
       case Condition.thunderstormWithHail:
         final intensity = weatherRange.intensity;
-        overlay = Color.fromARGB(intensity, 200, 180, 168);
+        overlay = Color.fromARGB(intensity.clamp(60, 120), 200, 150, 168);
 
-      case _:
+      case Condition.cloudy || Condition.fog:
+        final intensity = weatherRange.intensity;
+        overlay = Color.fromARGB(
+          ((intensity * cloudCover).toInt()).clamp(0, 255),
+          200,
+          150,
+          168,
+        );
+
+      case Condition.clear || Condition.unknown:
         return textColor;
     }
-    final blendColor = Color.lerp(textColor, overlay, 0.5);
+    final blendColor = Color.lerp(normalizedColor, overlay, blendFactor);
     final tintedColor = Color.fromARGB(
-      ((textColor.a * 255.0).round() & 0xff),
+      ((normalizedColor.a * 255.0).round() & 0xff),
       ((blendColor!.r * 255.0).round() & 0xff),
       ((blendColor.g * 255.0).round() & 0xff),
       ((blendColor.b * 255.0).round() & 0xff),
@@ -604,14 +666,25 @@ class _MyHomePageState extends State<MyHomePage> {
 
         dayProgress = totalDuration > 0 ? currentDuration / totalDuration : 0.0;
 
-        final preSunrise = sunrise.subtract(const Duration(minutes: 30));
+        final preSunrise = sunrise
+            .subtract(const Duration(minutes: 30))
+            .toLocal();
         if (now.isBefore(preSunrise)) {
-          dayProgress = -0.5;
+          dayProgress = -0.0417;
         } else if (now.isBefore(sunrise)) {
           final totalTransition = sunrise.difference(preSunrise).inSeconds;
           final passed = now.difference(preSunrise).inSeconds;
+          dayProgress =
+              -0.0417 + (passed / totalTransition) * (0.0 - (-0.0417));
         } else if (now.isAfter(sunset)) {
-          dayProgress = 1.0;
+          final postSunset = sunset.add(const Duration(minutes: 60));
+          if (now.isBefore(postSunset)) {
+            final totalSunset = postSunset.difference(sunset).inSeconds;
+            final passedSunset = now.difference(sunset).inSeconds;
+            dayProgress = 1.0 + (passedSunset / totalSunset) * (1.0696 - 1.0);
+          } else {
+            dayProgress = 1.0696;
+          }
         }
 
         return LightState(
@@ -619,6 +692,7 @@ class _MyHomePageState extends State<MyHomePage> {
           sunset: sunset,
           dayProgress: dayProgress,
           cachedLightStates: cachedLightStates,
+          totalDuration: (totalDuration as num).toDouble(),
         );
       }
     }
@@ -632,19 +706,27 @@ class _MyHomePageState extends State<MyHomePage> {
 
         final daylightDurationSeconds = forecastData["dailyDaylightDuration"];
         final totalDuration = (daylightDurationSeconds / 60).round();
-        final currentDuration = now.difference(sunrise).inMinutes;
+        final currentDuration = now.toLocal().difference(sunrise).inMinutes;
 
         dayProgress = totalDuration > 0 ? currentDuration / totalDuration : 0.0;
 
         final preSunrise = sunrise.subtract(const Duration(minutes: 30));
-
         if (now.isBefore(preSunrise)) {
-          dayProgress = -0.5;
+          dayProgress = -0.0417;
         } else if (now.isBefore(sunrise)) {
           final totalTransition = sunrise.difference(preSunrise).inSeconds;
           final passed = now.difference(preSunrise).inSeconds;
+          dayProgress =
+              -0.0417 + (passed / totalTransition) * (0.0 - (-0.0417));
         } else if (now.isAfter(sunset)) {
-          dayProgress = 1.0;
+          final postSunset = sunset.add(const Duration(minutes: 60));
+          if (now.isBefore(postSunset)) {
+            final totalSunset = postSunset.difference(sunset).inSeconds;
+            final passedSunset = now.difference(sunset).inSeconds;
+            dayProgress = 1.0 + (passedSunset / totalSunset) * (1.0696 - 1.0);
+          } else {
+            dayProgress = 1.0696;
+          }
         }
 
         // Guardar en caché datos reales
@@ -666,6 +748,7 @@ class _MyHomePageState extends State<MyHomePage> {
           sunset: sunset,
           dayProgress: dayProgress,
           cachedLightStates: cachedLightStates,
+          totalDuration: (totalDuration as num).toDouble(),
         );
       } catch (e) {
         debugPrint("Error parseando datos reales: $e");
@@ -682,12 +765,20 @@ class _MyHomePageState extends State<MyHomePage> {
     final preSunrise = sunrise.subtract(const Duration(minutes: 30));
 
     if (now.isBefore(preSunrise)) {
-      dayProgress = -0.5;
+      dayProgress = -0.0417;
     } else if (now.isBefore(sunrise)) {
-      final totalTransition = sunrise.difference(preSunrise).inSeconds; // 1800s
+      final totalTransition = sunrise.difference(preSunrise).inSeconds;
       final passed = now.difference(preSunrise).inSeconds;
+      dayProgress = -0.0417 + (passed / totalTransition) * (0.0 - (-0.0417));
     } else if (now.isAfter(sunset)) {
-      dayProgress = 1.0;
+      final postSunset = sunset.add(const Duration(minutes: 60));
+      if (now.isBefore(postSunset)) {
+        final totalSunset = postSunset.difference(sunset).inSeconds;
+        final passedSunset = now.difference(sunset).inSeconds;
+        dayProgress = 1.0 + (passedSunset / totalSunset) * (1.0696 - 1.0);
+      } else {
+        dayProgress = 1.0696;
+      }
     }
 
     debugPrint("Usando colores por defecto.");
@@ -697,6 +788,7 @@ class _MyHomePageState extends State<MyHomePage> {
       sunset: sunset,
       dayProgress: dayProgress,
       cachedLightStates: cachedLightStates,
+      totalDuration: totalDuration.toDouble(),
     );
   }
 
@@ -714,11 +806,14 @@ class _MyHomePageState extends State<MyHomePage> {
     var sunrise = DateTime.now().toLocal();
     var sunset = DateTime.now().add(const Duration(hours: 12)).toLocal();
     int? daylightDurationMin;
-    final now = DateTime.now();
-    //final now = DateTime.parse("2025-07-24 06:56:00");
+    DateTime now = DateTime.now().toLocal();
+    //now = DateTime.parse(
+    //"${now.year.toString()}-${now.month.toString().padLeft(2, "0")}-${now.day.toString().padLeft(2, "0")} 21:50:00",
+    //).toLocal();
     int weatherCode = 0;
     double testProgress = 0.9;
     int? cachedTimeStamp;
+    double currentTotalDuration;
 
     const int hoursMillisecondsLimit = 33 * 60 * 60 * 1000;
 
@@ -739,8 +834,11 @@ class _MyHomePageState extends State<MyHomePage> {
     sunrise = lightState.sunrise;
     sunset = lightState.sunset;
     dayProgress = lightState.dayProgress;
+    currentTotalDuration = lightState.totalDuration;
+    totalDuration = currentTotalDuration.toInt();
 
     debugPrint("El sunrise actual es $sunrise");
+    debugPrint("El sunset actual es $sunset");
     debugPrint("El WeatherCode es $weatherCode");
 
     if ((dayProgress - _dayProgress).abs() > 0.01) {
@@ -750,168 +848,194 @@ class _MyHomePageState extends State<MyHomePage> {
     debugPrint("Progreso del día: $dayProgress");
 
     // Interpolación de colores para mainColor
-    final dayPhase = getDayPhase(_dayProgress);
+    final dayPhase = getDayPhase(_dayProgress, currentTotalDuration.toInt());
+    double t;
     switch (dayPhase) {
-      case DayPhase.nightBefore:
-        _mainColor = const Color.fromARGB(255, 231, 231, 250);
-        _titleTextColor = const Color.fromARGB(255, 226, 226, 255);
-        _secondaryColor = const Color.fromARGB(115, 120, 120, 180);
-        break;
-
       case DayPhase.dawn:
-        _mainColor =
-            Color.lerp(
-              const Color.fromARGB(255, 204, 183, 192),
-              const Color.fromARGB(255, 173, 203, 243),
-              _dayProgress * 5,
-            ) ??
-            const Color.fromARGB(255, 52, 85, 85);
-
-        _titleTextColor =
-            Color.lerp(
-              const Color.fromARGB(255, 255, 168, 255),
-              const Color.fromARGB(255, 255, 226, 108),
-              _dayProgress * 4,
-            ) ??
-            const Color.fromARGB(255, 255, 215, 0);
-
-        _secondaryColor =
-            Color.lerp(
-              const Color.fromARGB(115, 208, 142, 223),
-              const Color.fromARGB(115, 10, 10, 70),
-              _dayProgress * 4,
-            ) ??
-            const Color.fromARGB(115, 25, 25, 112);
+        debugPrint("$dayPhase");
+
+        t = Curves.easeInOut.transform((dayProgress / 0.125).clamp(0.0, 1.0));
+        _mainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 134, 106, 191)),
+          HSVColor.fromColor(const Color.fromARGB(255, 124, 207, 255)),
+          t,
+        )!.toColor();
+
+        _complementaryMainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 166, 182, 253)),
+          HSVColor.fromColor(const Color.fromARGB(255, 110, 190, 255)),
+          t,
+        )!.toColor();
+
+        _titleTextColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 255, 241, 147)),
+          HSVColor.fromColor(const Color.fromARGB(255, 255, 226, 108)),
+          t,
+        )!.toColor();
+
+        _secondaryColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(115, 208, 142, 223)),
+          HSVColor.fromColor(const Color.fromARGB(115, 12, 23, 124)),
+          t,
+        )!.toColor();
         break;
 
       case DayPhase.morning:
-        _mainColor =
-            Color.lerp(
-              const Color.fromARGB(255, 39, 95, 163),
-              const Color.fromARGB(255, 21, 97, 122),
-              (_dayProgress - 0.2) * 4,
-            ) ??
-            const Color.fromARGB(255, 0, 128, 128);
-
-        _titleTextColor =
-            Color.lerp(
-              const Color.fromARGB(255, 255, 226, 108),
-              const Color.fromARGB(255, 255, 240, 35),
-              (_dayProgress - 0.25) * 4,
-            ) ??
-            const Color.fromARGB(255, 255, 215, 0);
-
-        _secondaryColor =
-            Color.lerp(
-              const Color.fromARGB(115, 12, 23, 124),
-              const Color.fromARGB(115, 5, 125, 223),
-              (_dayProgress - 0.25) * 4,
-            ) ??
-            const Color.fromARGB(115, 25, 25, 112);
+        debugPrint("$dayPhase");
+
+        t = Curves.easeInOut.transform(
+          ((dayProgress - 0.125) / 0.125).clamp(0.0, 1.0),
+        );
+
+        _mainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          t,
+        )!.toColor();
+
+        _complementaryMainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          HSVColor.fromColor(const Color.fromARGB(255, 0, 62, 143)),
+          t,
+        )!.toColor();
+
+        _titleTextColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 255, 226, 108)),
+          HSVColor.fromColor(const Color.fromARGB(255, 255, 240, 35)),
+          t,
+        )!.toColor();
+
+        _secondaryColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(115, 12, 23, 124)),
+          HSVColor.fromColor(const Color.fromARGB(115, 5, 125, 223)),
+          t,
+        )!.toColor();
+
         break;
 
       case DayPhase.noon:
-        _mainColor =
-            Color.lerp(
-              const Color.fromARGB(255, 37, 106, 131),
-              const Color.fromARGB(255, 12, 53, 124),
-              (_dayProgress - 0.5) * 5,
-            ) ??
-            const Color.fromARGB(255, 0, 128, 128);
-
-        _titleTextColor =
-            Color.lerp(
-              const Color.fromARGB(207, 255, 217, 0),
-              const Color.fromARGB(255, 252, 219, 37),
-              (_dayProgress - 0.5) * 8,
-            ) ??
-            const Color.fromARGB(255, 0, 128, 128);
-
-        _secondaryColor =
-            Color.lerp(
-              const Color.fromARGB(115, 12, 23, 124),
-              const Color.fromARGB(115, 25, 162, 216),
-              (_dayProgress - 0.5) * 8,
-            ) ??
-            const Color.fromARGB(255, 0, 128, 128);
+        debugPrint("$dayPhase");
+
+        t = Curves.easeInOut.transform(
+          (((dayProgress - 0.25) / 0.15).clamp(0.0, 1.0)),
+        );
+
+        _mainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          t,
+        )!.toColor();
+
+        _complementaryMainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          t,
+        )!.toColor();
+
+        _titleTextColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(207, 255, 217, 0)),
+          HSVColor.fromColor(const Color.fromARGB(255, 252, 219, 37)),
+          t,
+        )!.toColor();
+
+        _secondaryColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(115, 12, 23, 124)),
+          HSVColor.fromColor(const Color.fromARGB(115, 0, 106, 148)),
+          t,
+        )!.toColor();
+
         break;
 
       case DayPhase.afternoon:
-        _mainColor =
-            Color.lerp(
-              const Color.fromARGB(255, 23, 91, 209),
-              const Color.fromARGB(255, 250, 96, 68),
-              (_dayProgress - 0.625) * 4,
-            ) ??
-            const Color.fromARGB(255, 0, 128, 128);
-
-        _titleTextColor =
-            Color.lerp(
-              const Color.fromARGB(255, 216, 189, 34),
-              const Color.fromARGB(255, 250, 239, 140),
-              (_dayProgress - 0.5) * 4,
-            ) ??
-            const Color.fromARGB(255, 255, 215, 0);
-
-        _secondaryColor =
-            Color.lerp(
-              const Color.fromARGB(115, 25, 25, 112),
-              const Color.fromARGB(115, 97, 179, 211),
-              (_dayProgress - 0.5) * 4,
-            ) ??
-            const Color.fromARGB(115, 25, 25, 112);
+        debugPrint("$dayPhase");
+
+        t = Curves.easeInOut.transform(
+          ((dayProgress - 0.7) / 0.125).clamp(0.0, 1.0),
+        );
+
+        _mainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          HSVColor.fromColor(const Color.fromARGB(255, 2, 90, 206)),
+          t,
+        )!.toColor();
+
+        _complementaryMainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 1, 68, 155)),
+          HSVColor.fromColor(const Color.fromARGB(255, 4, 84, 189)),
+          t,
+        )!.toColor();
+
+        _titleTextColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 216, 189, 34)),
+          HSVColor.fromColor(const Color.fromARGB(255, 221, 209, 134)),
+          t,
+        )!.toColor();
+
+        _secondaryColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(115, 52, 52, 170)),
+          HSVColor.fromColor(const Color.fromARGB(115, 52, 52, 170)),
+          t,
+        )!.toColor();
+
         break;
 
       case DayPhase.sunset:
-        _mainColor =
-            Color.lerp(
-              const Color.fromARGB(255, 245, 128, 45),
-              const Color.fromARGB(255, 203, 203, 250),
-              (_dayProgress - 0.75) * 8,
-            ) ??
-            const Color.fromARGB(255, 100, 100, 160);
-
-        _titleTextColor =
-            Color.lerp(
-              const Color.fromARGB(255, 253, 165, 149),
-              const Color.fromARGB(255, 200, 200, 255),
-              (_dayProgress - 0.75) * 8,
-            ) ??
-            const Color.fromARGB(255, 100, 100, 160);
-
-        _secondaryColor =
-            Color.lerp(
-              const Color.fromARGB(115, 139, 150, 136),
-              const Color.fromARGB(115, 199, 199, 172),
-              (_dayProgress - 0.75) * 8,
-            ) ??
-            const Color.fromARGB(115, 100, 100, 160);
+        debugPrint("$dayPhase");
+
+        t = Curves.easeInOut.transform(
+          ((dayProgress - 1.0) / (1.1667 - 1.0)).clamp(0.0, 1.0),
+        );
+        _mainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(117, 111, 0, 255)),
+          HSVColor.fromColor(const Color.fromARGB(255, 221, 221, 221)),
+          t,
+        )!.toColor();
+
+        _complementaryMainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(153, 105, 41, 255)),
+          HSVColor.fromColor(const Color.fromARGB(255, 221, 221, 221)),
+          t,
+        )!.toColor();
+
+        _titleTextColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 255, 188, 176)),
+          HSVColor.fromColor(const Color.fromARGB(255, 255, 255, 255)),
+          t,
+        )!.toColor();
+
+        _secondaryColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(115, 85, 59, 53)),
+          HSVColor.fromColor(const Color.fromARGB(115, 201, 201, 180)),
+          t,
+        )!.toColor();
+
         break;
 
-      case DayPhase.night:
-        _mainColor =
-            Color.lerp(
-              const Color.fromARGB(255, 255, 238, 227),
-              const Color.fromARGB(255, 231, 231, 250),
-              (_dayProgress - 0.875) * 4,
-            ) ??
-            const Color.fromARGB(255, 100, 100, 160);
-
-        _titleTextColor =
-            Color.lerp(
-              const Color.fromARGB(255, 255, 187, 174),
-              const Color.fromARGB(255, 226, 226, 255),
-              (_dayProgress - 0.75) * 4,
-            ) ??
-            const Color.fromARGB(255, 200, 200, 255);
-
-        _secondaryColor =
-            Color.lerp(
-              const Color.fromARGB(115, 115, 87, 87),
-              const Color.fromARGB(115, 120, 120, 180),
-              (_dayProgress - 0.75) * 4,
-            ) ??
-            const Color.fromARGB(115, 120, 120, 180);
+      case DayPhase.night || DayPhase.nightBefore:
+        debugPrint("$dayPhase");
+        double t = (dayProgress < -0.0417 || dayProgress > 1.1667)
+            ? 1.0
+            : ((dayProgress - 1.0) / (1.1667 - 1.0)).clamp(0.0, 1.0);
+        _mainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 231, 231, 250)),
+          HSVColor.fromColor(const Color.fromARGB(255, 231, 231, 250)),
+          t,
+        )!.toColor();
+        _complementaryMainColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 221, 221, 221)),
+          HSVColor.fromColor(const Color.fromARGB(255, 221, 221, 221)),
+          t,
+        )!.toColor();
+        _titleTextColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(255, 226, 226, 255)),
+          HSVColor.fromColor(const Color.fromARGB(255, 226, 226, 255)),
+          t,
+        )!.toColor();
+        _secondaryColor = HSVColor.lerp(
+          HSVColor.fromColor(const Color.fromARGB(115, 120, 120, 180)),
+          HSVColor.fromColor(const Color.fromARGB(115, 120, 120, 180)),
+          t,
+        )!.toColor();
         break;
     }
   }
@@ -934,14 +1058,33 @@ class _MyHomePageState extends State<MyHomePage> {
         var weatherCode = metarData?["weather_code"] ?? 0;
         double cloudCover = metarData?["cloudCover"] ?? 0.0;
 
-        _titleTextColor = applyWeatherTimeToTexts(_titleTextColor, weatherCode);
-        _mainColor = applyWeatherTimeToTexts(_mainColor, weatherCode);
-        _secondaryColor = applyWeatherTimeToTexts(_secondaryColor, weatherCode);
-
         //final testWeatherCode = 0;
-        //final testCloudCover = 100;
+        //final testCloudCover = 0.0;
         //weatherCode = testWeatherCode;
         //cloudCover = testCloudCover;
+
+        _titleTextColor = applyWeatherTimeToTexts(
+          _titleTextColor,
+          weatherCode,
+          cloudCover,
+        );
+        _mainColor = applyWeatherTimeToTexts(
+          _mainColor,
+          weatherCode,
+          cloudCover,
+        );
+        _secondaryColor = applyWeatherTimeToTexts(
+          _secondaryColor,
+          weatherCode,
+          cloudCover,
+        );
+
+        _complementaryMainColor = applyWeatherTimeToTexts(
+          _complementaryMainColor,
+          weatherCode,
+          cloudCover,
+        );
+
         if (metarData == null ||
             metarData.isEmpty ||
             forecastData == null ||
@@ -949,6 +1092,7 @@ class _MyHomePageState extends State<MyHomePage> {
           return Scaffold(
             backgroundColor: Colors.transparent,
             body: MovingCloudsBackground(
+              totalDuration: totalDuration ?? 0,
               shootingStars: ShootingStars(dayProgress: _dayProgress),
               dynamicStars: DynamicStars(dayProgress: _dayProgress),
               weatherCode: weatherCode,
@@ -974,87 +1118,98 @@ class _MyHomePageState extends State<MyHomePage> {
         var precipitation = forecastData["precipitationByHours"];
         var sunrise = DateTime.parse(forecastData["dailySunrise"]);
         var sunset = DateTime.parse(forecastData["dailySunset"]);
+        final bool isAppBarDark = true; // O calcula esto dinámicamente
+
+        return AnnotatedRegion<SystemUiOverlayStyle>(
+          value: SystemUiOverlayStyle(
+            statusBarColor: Colors.white,
+            systemNavigationBarColor: Colors.white,
+            statusBarBrightness: Brightness.light,
+            systemNavigationBarIconBrightness: Brightness.light,
+          ),
+          child: Scaffold(
+            floatingActionButton: FloatingActionButton(
+              shape: RoundedRectangleBorder(
+                borderRadius: BorderRadius.circular(
+                  30,
+                ), // o 0 para que sea cuadrado
+              ),
 
-        return Scaffold(
-          floatingActionButton: FloatingActionButton(
-            shape: RoundedRectangleBorder(
-              borderRadius: BorderRadius.circular(
-                30,
-              ), // o 0 para que sea cuadrado
+              tooltip: "Invitame un café!",
+              backgroundColor: _titleTextColor,
+              onPressed: () async {
+                _launchUrl();
+              },
+              child: Icon(Icons.coffee, color: Colors.black87),
             ),
-
-            tooltip: "Invitame un café!",
-            backgroundColor: _titleTextColor,
-            onPressed: () async {
-              _launchUrl();
-            },
-            child: Icon(Icons.coffee, color: Colors.black87),
-          ),
-          backgroundColor: Colors.transparent,
-          body: MovingCloudsBackground(
-            shootingStars: ShootingStars(dayProgress: _dayProgress),
-            dynamicStars: DynamicStars(dayProgress: _dayProgress),
-            weatherCode: weatherCode,
-            cloudCover: (cloudCover as num).toDouble(),
-            dynamicWeather: DynamicWeather(weatherCode: weatherCode),
-            dayProgress: _dayProgress,
-            child: RefreshIndicator(
-              color: _titleTextColor,
-              backgroundColor: _mainColor,
-              displacement: 0.0,
-              edgeOffset: 0,
-              onRefresh: () async {
-                await newWeatherApi.getPrecisePositionLocationMethod().then((
-                  _,
-                ) {
-                  newWeatherApi.findNerbyStation();
-                  newWeatherApi.getForecast();
-                  newWeatherApi.fetchMetarData();
-                  newWeatherApi.getICA();
-                  setState(() {
-                    _updateDayProgressAndColors();
+            backgroundColor: Colors.transparent,
+            body: MovingCloudsBackground(
+              totalDuration: totalDuration ?? 0,
+              shootingStars: ShootingStars(dayProgress: _dayProgress),
+              dynamicStars: DynamicStars(dayProgress: _dayProgress),
+              weatherCode: weatherCode,
+              cloudCover: (cloudCover as num).toDouble(),
+              dynamicWeather: DynamicWeather(weatherCode: weatherCode),
+              dayProgress: _dayProgress,
+              child: RefreshIndicator(
+                color: _titleTextColor,
+                backgroundColor: _mainColor,
+                displacement: 0.0,
+                edgeOffset: 0,
+                onRefresh: () async {
+                  await newWeatherApi.getPrecisePositionLocationMethod().then((
+                    _,
+                  ) {
+                    newWeatherApi.findNerbyStation();
+                    newWeatherApi.getForecast();
+                    newWeatherApi.fetchMetarData();
+                    newWeatherApi.getICA();
+                    setState(() {
+                      _updateDayProgressAndColors();
+                    });
                   });
-                });
-              },
-              child: CustomScrollView(
-                slivers: [
-                  SliverList(
-                    delegate: SliverChildListDelegate([
-                      Padding(
-                        padding: EdgeInsets.only(top: 90),
-                        child: Column(
-                          mainAxisSize: MainAxisSize.max,
-                          children: [
-                            IndexPage(
-                              cloudCover: cloudCover,
-                              weatherCode: weatherCode,
-                              weatherState: newWeatherApi,
-                              mainColor: _mainColor,
-                              separatedTemp: separatedTemp,
-                              secondaryColor: _secondaryColor,
-                              dayProgress: _dayProgress,
-                              sunset: sunset,
-                              sunrise: sunrise,
-                              hours: (hours as List<dynamic>)
-                                  .map((e) => e as int)
-                                  .toList(),
-                              tempByHours: (tempByHours as List<dynamic>)
-                                  .map((e) => e as double)
-                                  .toList(),
-                              titleTextColor: _titleTextColor,
-                              dates: (dates as List<dynamic>)
-                                  .map((e) => DateTime.parse(e))
-                                  .toList(),
-                              precipitation: (precipitation as List<dynamic>)
-                                  .map((e) => e as double)
-                                  .toList(),
-                            ),
-                          ],
+                },
+                child: CustomScrollView(
+                  slivers: [
+                    SliverList(
+                      delegate: SliverChildListDelegate([
+                        Padding(
+                          padding: EdgeInsets.only(top: 90),
+                          child: Column(
+                            mainAxisSize: MainAxisSize.max,
+                            children: [
+                              IndexPage(
+                                complementaryMainColor: _complementaryMainColor,
+                                cloudCover: cloudCover,
+                                weatherCode: weatherCode,
+                                weatherState: newWeatherApi,
+                                mainColor: _mainColor,
+                                separatedTemp: separatedTemp,
+                                secondaryColor: _secondaryColor,
+                                dayProgress: _dayProgress,
+                                sunset: sunset,
+                                sunrise: sunrise,
+                                hours: (hours as List<dynamic>)
+                                    .map((e) => e as int)
+                                    .toList(),
+                                tempByHours: (tempByHours as List<dynamic>)
+                                    .map((e) => e as double)
+                                    .toList(),
+                                titleTextColor: _titleTextColor,
+                                dates: (dates as List<dynamic>)
+                                    .map((e) => DateTime.parse(e))
+                                    .toList(),
+                                precipitation: (precipitation as List<dynamic>)
+                                    .map((e) => e as double)
+                                    .toList(),
+                              ),
+                            ],
+                          ),
                         ),
-                      ),
-                    ]),
-                  ),
-                ],
+                      ]),
+                    ),
+                  ],
+                ),
               ),
             ),
           ),
@@ -1081,10 +1236,12 @@ class IndexPage extends StatefulWidget {
     required this.sunset,
     required this.weatherCode,
     required this.cloudCover,
+    required this.complementaryMainColor,
   });
   final WeatherService weatherState;
   final Color mainColor;
   final Color secondaryColor;
+  final Color complementaryMainColor;
   final List<String> separatedTemp;
   final Color titleTextColor;
   final int weatherCode;
@@ -1273,14 +1430,28 @@ class _IndexPageState extends State<IndexPage> {
               crossAxisAlignment: CrossAxisAlignment.center,
               mainAxisAlignment: MainAxisAlignment.center,
               children: [
-                Text(
-                  _getCondition(widget.weatherCode, widget.cloudCover),
-                  style: TextStyle(fontSize: 25, color: widget.mainColor),
-                ),
-                Text(
-                  siteName,
-                  style: TextStyle(fontSize: 30, color: widget.mainColor),
+                Stack(
+                  children: [
+                    Text(
+                      siteName,
+                      style: GoogleFonts.kanit(
+                        fontSize: 35,
+                        foreground: Paint()
+                          ..style = PaintingStyle.stroke
+                          ..strokeWidth = 2
+                          ..color = Color.fromRGBO(0, 0, 0, 0.11),
+                      ),
+                    ),
+                    Text(
+                      siteName,
+                      style: GoogleFonts.kanit(
+                        fontSize: 35,
+                        color: widget.mainColor,
+                      ),
+                    ),
+                  ],
                 ),
+
                 Row(
                   spacing: 0,
                   mainAxisAlignment: MainAxisAlignment.center,
@@ -1302,27 +1473,62 @@ class _IndexPageState extends State<IndexPage> {
                               ),
                             );
                           },
-                          child: Text(
-                            intigerPart[i],
-                            key: ValueKey(intigerPart[i]),
+                          child: Stack(
+                            children: [
+                              Text(
+                                intigerPart[i],
+                                key: ValueKey("stroke_${intigerPart[i]}"),
+                                style: GoogleFonts.kanit(
+                                  fontSize: 100,
+                                  fontWeight: FontWeight.bold,
+                                  foreground: Paint()
+                                    ..style = PaintingStyle.stroke
+                                    ..strokeWidth = 2
+                                    ..color = Color.fromRGBO(0, 0, 0, 0.11),
+                                ),
+                                maxLines: 1,
+                              ),
+
+                              Text(
+                                intigerPart[i],
+                                key: ValueKey("fill_${intigerPart[i]}"),
+                                style: GoogleFonts.kanit(
+                                  fontSize: 100,
+                                  color: widget.titleTextColor,
+                                  fontWeight: FontWeight.bold,
+                                ),
+                                maxLines: 1,
+                              ),
+                            ],
+                          ),
+                        ),
+                      ),
+
+                    Flexible(
+                      child: Stack(
+                        children: [
+                          Text(
+                            ".",
+                            style: GoogleFonts.kanit(
+                              fontSize: 90,
+                              fontWeight: FontWeight.bold,
+                              foreground: Paint()
+                                ..style = PaintingStyle.stroke
+                                ..strokeWidth = 2
+                                ..color = Color.fromRGBO(0, 0, 0, 0.11),
+                            ),
+                            maxLines: 1,
+                          ),
+                          Text(
+                            ".",
                             style: GoogleFonts.kanit(
-                              fontSize: 100,
+                              fontSize: 90,
                               color: widget.titleTextColor,
                               fontWeight: FontWeight.bold,
                             ),
                             maxLines: 1,
                           ),
-                        ),
-                      ),
-                    Flexible(
-                      child: Text(
-                        ".",
-                        style: GoogleFonts.kanit(
-                          fontSize: 90,
-                          color: widget.titleTextColor,
-                          fontWeight: FontWeight.bold,
-                        ),
-                        maxLines: 1,
+                        ],
                       ),
                     ),
                     Flexible(
@@ -1340,56 +1546,137 @@ class _IndexPageState extends State<IndexPage> {
                             ),
                           );
                         },
-                        child: Padding(
-                          key: ValueKey(
-                            widget.separatedTemp.isNotEmpty
-                                ? widget.separatedTemp[1]
-                                : 0,
-                          ),
-                          padding: const EdgeInsets.only(top: 0),
-                          child: Text(
-                            "${widget.separatedTemp.isNotEmpty ? widget.separatedTemp[1][0] : 0}",
-                            style: GoogleFonts.kanit(
-                              fontSize: 90,
-                              color: widget.titleTextColor,
-                              fontWeight: FontWeight.bold,
+                        child: Stack(
+                          children: [
+                            Text(
+                              "${widget.separatedTemp.isNotEmpty ? widget.separatedTemp[1][0] : 0}",
+                              style: GoogleFonts.kanit(
+                                fontSize: 90,
+                                fontWeight: FontWeight.bold,
+                                foreground: Paint()
+                                  ..style = PaintingStyle.stroke
+                                  ..strokeWidth = 2
+                                  ..color = Color.fromRGBO(0, 0, 0, 0.11),
+                              ),
+                              key: ValueKey(
+                                "stroke_${widget.separatedTemp.isNotEmpty ? widget.separatedTemp[1] : 0}",
+                              ),
+                              maxLines: 2,
                             ),
-                            maxLines: 2,
+                            Text(
+                              "${widget.separatedTemp.isNotEmpty ? widget.separatedTemp[1][0] : 0}",
+                              style: GoogleFonts.kanit(
+                                fontSize: 90,
+                                color: widget.titleTextColor,
+                                fontWeight: FontWeight.bold,
+                              ),
+                              key: ValueKey(
+                                "fill_${widget.separatedTemp.isNotEmpty ? widget.separatedTemp[1] : 0}",
+                              ),
+                              maxLines: 2,
+                            ),
+                          ],
+                        ),
+                      ),
+                    ),
+                    Stack(
+                      children: [
+                        Text(
+                          "C°",
+                          style: GoogleFonts.kanit(
+                            fontSize: 90,
+                            fontWeight: FontWeight.bold,
+                            foreground: Paint()
+                              ..style = PaintingStyle.stroke
+                              ..strokeWidth = 2
+                              ..color = Color.fromRGBO(0, 0, 0, 0.11),
                           ),
+                          overflow: TextOverflow.visible,
                         ),
+                        Text(
+                          "C°",
+                          style: GoogleFonts.kanit(
+                            fontSize: 90,
+                            color: widget.titleTextColor,
+                            fontWeight: FontWeight.bold,
+                          ),
+                          overflow: TextOverflow.visible,
+                        ),
+                      ],
+                    ),
+                  ],
+                ),
+                Stack(
+                  children: [
+                    Text(
+                      _getCondition(widget.weatherCode, widget.cloudCover),
+                      style: GoogleFonts.kanit(
+                        fontSize: 25,
+                        foreground: Paint()
+                          ..style = PaintingStyle.stroke
+                          ..strokeWidth = 1.5
+                          ..color = Color.fromRGBO(0, 0, 0, 0.11),
                       ),
                     ),
                     Text(
-                      "C°",
+                      _getCondition(widget.weatherCode, widget.cloudCover),
                       style: GoogleFonts.kanit(
-                        fontSize: 90,
-                        color: widget.titleTextColor,
-                        fontWeight: FontWeight.bold,
+                        fontSize: 25,
+                        color: widget.complementaryMainColor,
                       ),
-                      overflow: TextOverflow.visible,
                     ),
                   ],
                 ),
               ],
             ),
             Flexible(
-              child: Text(
-                "↑$maxTemp°/↓$minTemp°",
-                style: GoogleFonts.kanit(
-                  fontSize: 27,
-                  color: widget.mainColor,
-                  fontWeight: FontWeight.w300,
-                ),
+              child: Stack(
+                children: [
+                  Text(
+                    "↑$maxTemp°/↓$minTemp°",
+                    style: GoogleFonts.kanit(
+                      fontSize: 27,
+                      fontWeight: FontWeight.w300,
+                      foreground: Paint()
+                        ..style = PaintingStyle.stroke
+                        ..strokeWidth = 1.5
+                        ..color = Color.fromRGBO(0, 0, 0, 0.11),
+                    ),
+                  ),
+                  Text(
+                    "↑$maxTemp°/↓$minTemp°",
+                    style: GoogleFonts.kanit(
+                      fontSize: 27,
+                      color: widget.complementaryMainColor,
+                      fontWeight: FontWeight.w300,
+                    ),
+                  ),
+                ],
               ),
             ),
             Flexible(
-              child: Text(
-                "Sensación térmica: $heatIndex °C",
-                style: GoogleFonts.kanit(
-                  fontSize: 27,
-                  color: widget.mainColor,
-                  fontWeight: FontWeight.w300,
-                ),
+              child: Stack(
+                children: [
+                  Text(
+                    "Sensación térmica: $heatIndex °C",
+                    style: GoogleFonts.kanit(
+                      fontSize: 27,
+                      fontWeight: FontWeight.w300,
+                      foreground: Paint()
+                        ..style = PaintingStyle.stroke
+                        ..strokeWidth = 1.5
+                        ..color = Color.fromRGBO(0, 0, 0, 0.11),
+                    ),
+                  ),
+                  Text(
+                    "Sensación térmica: $heatIndex °C",
+                    style: GoogleFonts.kanit(
+                      fontSize: 27,
+                      color: widget.complementaryMainColor,
+                      fontWeight: FontWeight.w300,
+                    ),
+                  ),
+                ],
               ),
             ),
             Container(
@@ -1455,19 +1742,19 @@ class _IndexPageState extends State<IndexPage> {
                           height: 150,
                           child: LineChart(
                             LineChartData(
-                              minX: 0,
+                              minX: -0.1,
                               maxX: spots.length - 1,
                               minY: (tempByHours.first) - 20,
                               maxY: (tempByHours.first) + 40,
-                              //minY: 0,
-                              //maxY: 100,
                               gridData: FlGridData(show: false),
                               borderData: FlBorderData(show: false),
                               clipData: FlClipData.none(),
                               lineTouchData: LineTouchData(
                                 enabled: false,
                                 touchTooltipData: LineTouchTooltipData(
-                                  tooltipBgColor: Color.fromARGB(0, 0, 0, 0),
+                                  getTooltipColor: (LineBarSpot touchedSpot) {
+                                    return Color.fromARGB(0, 0, 0, 0);
+                                  },
                                   tooltipMargin: 1,
                                   tooltipPadding: EdgeInsets.all(20),
                                   getTooltipItems:
@@ -1501,10 +1788,35 @@ class _IndexPageState extends State<IndexPage> {
                                                   .spotIndex];
 
                                           return LineTooltipItem(
-                                            "$hour12 $amPm \n $temp°C\n$precipitationType $precip%",
+                                            "",
                                             GoogleFonts.kanit(
                                               color: Colors.white,
                                             ),
+                                            children: [
+                                              TextSpan(
+                                                text:
+                                                    "$hour12 $amPm\n$temp°C\n",
+                                                style: GoogleFonts.kanit(
+                                                  color: Colors.white,
+                                                ),
+                                              ),
+                                              TextSpan(
+                                                text:
+                                                    "$precipitationType", // Unicode de lluvia
+                                                style: TextStyle(
+                                                  fontFamily: "WeatherIcons",
+                                                  fontSize: 17,
+                                                  color: widget.titleTextColor,
+                                                ),
+                                              ),
+                                              TextSpan(
+                                                text:
+                                                    " $precip%", // texto normal
+                                                style: GoogleFonts.kanit(
+                                                  color: Colors.white,
+                                                ),
+                                              ),
+                                            ],
                                           );
                                         }).toList();
                                       },
@@ -1743,6 +2055,8 @@ class Recomendations extends StatelessWidget {
     var precipitationByHours =
         forecastData?["precipitationByHours"] ?? [0, 0, 0];
 
+    final PageController _controller = PageController();
+
     return LayoutBuilder(
       builder: (context, constraits) {
         return Card(
@@ -1753,6 +2067,7 @@ class Recomendations extends StatelessWidget {
             child: SizedBox(
               width: constraits.maxWidth - 80,
               child: Column(
+                mainAxisSize: MainAxisSize.min,
                 spacing: 10,
                 children: [
                   Row(
@@ -1768,37 +2083,72 @@ class Recomendations extends StatelessWidget {
                       Icon(Icons.recommend, color: Colors.white, size: 18),
                     ],
                   ),
-                  Column(
-                    spacing: 5,
-                    crossAxisAlignment: CrossAxisAlignment.center,
-                    mainAxisAlignment: MainAxisAlignment.center,
-                    children: List.generate(
-                      _getRecommendations(
-                        temperature,
-                        humidity,
-                        heatIndex,
-                        windSpeed,
-                        precipitationByHours[0],
-                        uvIndex,
-                        dewPoint,
-                      ).length,
-                      (index) {
-                        return Text(
-                          _getRecommendations(
-                            temperature,
-                            humidity,
-                            heatIndex,
-                            windSpeed,
-                            precipitationByHours[0],
-                            uvIndex,
-                            dewPoint,
-                          )[index],
-                          style: GoogleFonts.kanit(
-                            color: Colors.white,
-                            fontSize: 14,
+
+                  SizedBox(
+                    height: 100,
+                    child: PageView(
+                      controller: _controller,
+                      children: [
+                        Column(
+                          spacing: 5,
+                          crossAxisAlignment: CrossAxisAlignment.center,
+                          mainAxisAlignment: MainAxisAlignment.center,
+                          children: List.generate(
+                            _getRecommendations(
+                              temperature,
+                              humidity,
+                              heatIndex,
+                              windSpeed,
+                              precipitationByHours[0],
+                              uvIndex,
+                              dewPoint,
+                            ).length,
+                            (index) {
+                              return Text(
+                                _getRecommendations(
+                                  temperature,
+                                  humidity,
+                                  heatIndex,
+                                  windSpeed,
+                                  precipitationByHours[0],
+                                  uvIndex,
+                                  dewPoint,
+                                )[index],
+                                style: GoogleFonts.kanit(
+                                  color: Colors.white,
+                                  fontSize: 14,
+                                ),
+                              );
+                            },
                           ),
-                        );
-                      },
+                        ),
+
+                        Column(
+                          spacing: 5,
+                          crossAxisAlignment: CrossAxisAlignment.center,
+                          mainAxisAlignment: MainAxisAlignment.center,
+                          children: [
+                            Text(
+                              "Próximamente...",
+                              style: GoogleFonts.kanit(
+                                color: Colors.white,
+                                fontSize: 14,
+                              ),
+                            ),
+                          ],
+                        ),
+                      ],
+                    ),
+                  ),
+                  const SizedBox(height: 12),
+                  SmoothPageIndicator(
+                    controller: _controller,
+                    count: 2,
+                    effect: WormEffect(
+                      dotHeight: 8,
+                      dotWidth: 8,
+                      activeDotColor: Colors.white,
+                      dotColor: Colors.white54,
                     ),
                   ),
                 ],
@@ -1961,14 +2311,16 @@ class _SunCurveState extends State<SunCurve> {
         ? 12
         : sunset24Hour.hourOfPeriod;
     final sunsetAmPm = sunset24Hour.period == DayPeriod.am ? "AM" : "PM";
-    final sunsetHour = "${sunset24Hour.hourOfPeriod}:${sunset24Hour.minute}";
+    final sunsetHour =
+        "${sunset24Hour.hourOfPeriod}:${sunset24Hour.minute.toString().padLeft(2, '0')} $sunsetAmPm";
 
     final sunrise24Hour = TimeOfDay(hour: sunrise.hour, minute: sunrise.minute);
     final sunrise12Hour = sunrise24Hour.hourOfPeriod == 0
         ? 12
         : sunrise24Hour.hourOfPeriod;
     final sunriseAmPm = sunrise24Hour.period == DayPeriod.am ? "AM" : "PM";
-    final sunriseHour = "${sunrise24Hour.hourOfPeriod}:${sunrise24Hour.minute}";
+    final sunriseHour =
+        "${sunrise24Hour.hourOfPeriod}:${sunrise24Hour.minute.toString().padLeft(2, '0')} $sunriseAmPm";
 
     return LayoutBuilder(
       builder: (context, constraits) {
@@ -2002,7 +2354,7 @@ class _SunCurveState extends State<SunCurve> {
                             ),
                           ),
                           Text(
-                            "$sunriseHour $sunriseAmPm",
+                            sunriseHour,
                             style: GoogleFonts.kanit(color: Colors.white),
                           ),
                         ],
@@ -2017,7 +2369,7 @@ class _SunCurveState extends State<SunCurve> {
                             ),
                           ),
                           Text(
-                            "$sunsetHour $sunsetAmPm",
+                            sunsetHour,
                             style: GoogleFonts.kanit(color: Colors.white),
                           ),
                         ],
@@ -2124,7 +2476,7 @@ class Cards extends StatelessWidget {
     required this.titleTextColor,
   });
 
-  final mainColor;
+  final Color mainColor;
   final secondaryColor;
   final titleTextColor;
   final cardPadding = EdgeInsets.all(15);
@@ -2648,7 +3000,7 @@ class Cards extends StatelessWidget {
                             overflow: TextOverflow.ellipsis,
                           ),
                           Text(
-                            "$pressure hPa",
+                            "$pressure hPa ",
                             style: GoogleFonts.kanit(
                               fontSize: fontCardSize - 2,
                               color: Colors.white,
@@ -2664,7 +3016,10 @@ class Cards extends StatelessWidget {
                               ),
                               value: (double.parse(pressure)) / 2000,
                               color: titleTextColor,
-                              backgroundColor: mainColor,
+                              backgroundColor: Color.alphaBlend(
+                                mainColor,
+                                titleTextColor,
+                              ),
                             ),
                           ),
                         ],
@@ -2867,7 +3222,10 @@ class Cards extends StatelessWidget {
                                 ),
                                 value: (humidity) / 100,
                                 color: titleTextColor,
-                                backgroundColor: mainColor,
+                                backgroundColor: Color.alphaBlend(
+                                  mainColor,
+                                  titleTextColor,
+                                ),
                               ),
                             ),
                           ],
@@ -2986,10 +3344,10 @@ class DynamicStars extends StatefulWidget {
   final double dayProgress;
   const DynamicStars({super.key, required this.dayProgress});
   @override
-  _DynamicStartsState createState() => _DynamicStartsState();
+  _DynamicStarsState createState() => _DynamicStarsState();
 }
 
-class _DynamicStartsState extends State<DynamicStars>
+class _DynamicStarsState extends State<DynamicStars>
     with SingleTickerProviderStateMixin {
   late double dayProgress;
   late AnimationController _controller;
@@ -3005,6 +3363,12 @@ class _DynamicStartsState extends State<DynamicStars>
     dayProgress = widget.dayProgress;
   }
 
+  @override
+  void dispose() {
+    _controller.dispose();
+    super.dispose();
+  }
+
   @override
   Widget build(BuildContext context) {
     return AnimatedBuilder(
@@ -3029,7 +3393,7 @@ class StarsPainter extends CustomPainter {
   @override
   void paint(Canvas canvas, Size size) {
     double customDayProgress = dayProgress;
-    if (dayProgress < -0.6 || dayProgress >= 0.2 && dayProgress <= 0.8) return;
+    if (dayProgress < -0.6 || dayProgress >= 0.02 && dayProgress <= 0.8) return;
 
     final paint = Paint()
       ..color = Colors.white
@@ -3100,9 +3464,10 @@ class _ShootingStarsState extends State<ShootingStars>
   }
 
   void _startShootingStar() {
+    if (!mounted) return;
     _start = Offset(_random.nextDouble() * 500, _random.nextDouble() * 300);
     _angle = (pi / 4) + (_random.nextDouble() - 0.5) * pi / 6;
-    if ((widget.dayProgress >= -0.6 && widget.dayProgress <= 0.2) ||
+    if ((widget.dayProgress >= -0.6 && widget.dayProgress <= 0.02) ||
         widget.dayProgress >= 0.8) {
       _isVisible = true;
     }
@@ -3196,6 +3561,7 @@ class MovingCloudsBackground extends StatefulWidget {
   final double cloudCover;
   final int weatherCode;
   final Widget shootingStars;
+  final int totalDuration;
   const MovingCloudsBackground({
     super.key,
     required this.child,
@@ -3205,6 +3571,7 @@ class MovingCloudsBackground extends StatefulWidget {
     required this.weatherCode,
     required this.dynamicStars,
     required this.shootingStars,
+    required this.totalDuration,
   });
 
   @override
@@ -3250,6 +3617,7 @@ class _MovingCloudsBackgroundState extends State<MovingCloudsBackground>
       builder: (_, __) {
         return CustomPaint(
           painter: CloudyBakcgroundPainter(
+            totalDuration: widget.totalDuration,
             cloudCover: widget.cloudCover,
             weathercode: widget.weatherCode,
             dayProgress: widget.dayProgress,
@@ -3284,21 +3652,26 @@ class CloudyBakcgroundPainter extends CustomPainter {
     required this.dayProgress,
     required this.cloudCover,
     required this.weathercode,
+    required this.totalDuration,
   });
 
   final double cloud1X;
   final double cloud2X;
   final double cloud3X;
   double dayProgress;
+  int totalDuration;
   final double cloudCover;
   final int weathercode;
 
   LinearGradient applyWeatherTimeToBackground(
     LinearGradient basebackground,
     int weatherCode,
+    double cloudCover,
+    double dayProgress,
   ) {
     Color overlay;
     final weatherRange = WeatherCodesRanges(weatherCode: weatherCode);
+    final intensity = weatherRange.intensity - (dayProgress * dayProgress * 8);
     switch (weatherRange.description) {
       case Condition.rain ||
           Condition.rainShowers ||
@@ -3306,7 +3679,6 @@ class CloudyBakcgroundPainter extends CustomPainter {
           Condition.drizzle ||
           Condition.freezingDrizzle ||
           Condition.thunderstorm:
-        final intensity = weatherRange.intensity;
         overlay = Color.fromARGB(
           (intensity * 1.9 as num).toInt(),
           150,
@@ -3324,7 +3696,6 @@ class CloudyBakcgroundPainter extends CustomPainter {
         );
 
       case Condition.snowFall || Condition.snowGrains || Condition.snowShowers:
-        final intensity = weatherRange.intensity;
         overlay = Color.fromARGB(
           (intensity * 2 / 0.5 as num).toInt(),
           150,
@@ -3342,7 +3713,6 @@ class CloudyBakcgroundPainter extends CustomPainter {
         );
 
       case Condition.thunderstormWithHail:
-        final intensity = weatherRange.intensity;
         overlay = Color.fromARGB(
           (intensity * 2 / 0.57 as num).toInt(),
           150,
@@ -3359,14 +3729,37 @@ class CloudyBakcgroundPainter extends CustomPainter {
           stops: basebackground.stops,
         );
 
-      case _:
+      case Condition.cloudy || Condition.fog:
+        overlay = Color.fromARGB(
+          ((intensity * cloudCover / (dayProgress * 25)).toInt()).clamp(0, 255),
+          150,
+          150,
+          150,
+        );
+        List<Color> tintedColors = basebackground.colors.map((color) {
+          return Color.alphaBlend(overlay, color);
+        }).toList();
+        return LinearGradient(
+          begin: basebackground.begin,
+          end: basebackground.end,
+          colors: tintedColors,
+          stops: basebackground.stops,
+        );
+
+      case Condition.clear || Condition.unknown:
         return basebackground;
     }
   }
 
-  Color applyWeatherTimeToclouds(Color cloudColor, int weatherCode) {
+  Color applyWeatherTimeToclouds(
+    Color cloudColor,
+    int weatherCode,
+    double dayProgress,
+  ) {
     Color overlay;
     final weatherRange = WeatherCodesRanges(weatherCode: weatherCode);
+    final intensity =
+        weatherRange.intensity - (dayProgress * dayProgress * 8).toInt();
     switch (weatherRange.description) {
       case Condition.rain ||
           Condition.rainShowers ||
@@ -3374,21 +3767,22 @@ class CloudyBakcgroundPainter extends CustomPainter {
           Condition.drizzle ||
           Condition.freezingDrizzle ||
           Condition.thunderstorm:
-        final intensity = weatherRange.intensity;
         overlay = Color.fromARGB(intensity, 133, 133, 133);
         break;
 
       case Condition.snowFall || Condition.snowGrains || Condition.snowShowers:
-        final intensity = weatherRange.intensity;
         overlay = Color.fromARGB(intensity, 133, 133, 133);
         break;
 
       case Condition.thunderstormWithHail:
-        final intensity = weatherRange.intensity;
         overlay = Color.fromARGB(intensity, 133, 133, 133);
         break;
 
-      case _:
+      case Condition.cloudy || Condition.fog:
+        overlay = Color.fromARGB(intensity, 133, 133, 133);
+        break;
+
+      case Condition.clear || Condition.unknown:
         return cloudColor;
     }
 
@@ -3418,6 +3812,8 @@ class CloudyBakcgroundPainter extends CustomPainter {
     final double maxSize = 230;
 
     for (int i = 0; i < cloudCount; i++) {
+      final Random customRandom = Random(i - 12);
+
       final offset = baseOffsets[i % baseOffsets.length];
 
       final dx = offset.dx + (random.nextDouble() - 0.5) * 0.2;
@@ -3427,11 +3823,26 @@ class CloudyBakcgroundPainter extends CustomPainter {
         maxSize,
         random.nextDouble() * cloudCover,
       )!;
+
       final double opacity = (0.4 + 0.5 * cloudCover).clamp(0.0, 1.0);
-      paint.color = baseColor.withAlpha((opacity * 50).toInt());
-      canvas.drawCircle(
-        Offset(size.width * dx, size.height * dy),
-        radius,
+      int alpha = (opacity * random.nextInt(105)).toInt().clamp(0, 255);
+      Color basecolorWithAlpha = baseColor.withAlpha(alpha);
+      final HSLColor hsl = HSLColor.fromColor(basecolorWithAlpha);
+
+      final lightnessVariation = (0.55 + customRandom.nextDouble() * 0.5).clamp(
+        0.0,
+        1.0,
+      );
+
+      final Color shadedColor = hsl.withLightness(lightnessVariation).toColor();
+
+      paint.color = shadedColor;
+
+      canvas.drawOval(
+        Rect.fromCircle(
+          center: Offset(size.width * dx, size.height * dy),
+          radius: radius,
+        ),
         paint,
       );
     }
@@ -3458,6 +3869,23 @@ class CloudyBakcgroundPainter extends CustomPainter {
     }
   }
 
+  LinearGradient lerpGradient(LinearGradient a, LinearGradient b, double t) {
+    final colors = List<Color>.generate(
+      a.colors.length,
+      (i) => HSLColor.lerp(
+        HSLColor.fromColor(a.colors[i]),
+        HSLColor.fromColor(b.colors[i]),
+        t,
+      )!.toColor(),
+    );
+    return LinearGradient(
+      begin: a.begin,
+      end: b.end,
+      colors: colors,
+      stops: a.stops,
+    );
+  }
+
   @override
   void paint(Canvas canvas, Size size) {
     final Paint paint = Paint()
@@ -3466,163 +3894,190 @@ class CloudyBakcgroundPainter extends CustomPainter {
     final Paint backgroundPaint = Paint();
     LinearGradient backgroundColor;
 
-    if (dayProgress == -2.0) {
-      backgroundColor = LinearGradient(
-        begin: Alignment.topCenter,
-        end: Alignment.bottomCenter,
-        colors: [
-          const Color.fromARGB(255, 13, 110, 221), // mediodía
-          const Color.fromARGB(255, 201, 223, 252),
-        ],
-        stops: [0.0, 1.0],
-      );
-    } else if (dayProgress < 0) {
-      backgroundColor = LinearGradient(
-        begin: Alignment.topCenter,
-        end: Alignment.bottomCenter,
-        colors: [
-          const Color.fromARGB(255, 10, 10, 30), // Negro
-          const Color.fromARGB(255, 5, 5, 15), // Más oscuro
-        ],
-        stops: [0.0, 1.0],
-      );
-    } else if (dayProgress <= 0.2) {
-      backgroundColor = LinearGradient.lerp(
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomRight,
-          colors: [
-            const Color.fromARGB(255, 20, 20, 40), // Noche inicial
-            const Color.fromARGB(255, 255, 157, 173), // Rosado amanecer
-          ],
-          stops: [0.0, 1.0],
-        ),
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(148, 113, 108, 173), // Rosado amanecer
-            const Color.fromARGB(255, 165, 220, 252), // Noche inicial
-          ],
-          stops: [0.0, 1.0],
-        ),
-        dayProgress / 0.25,
-      )!;
-    } else if (dayProgress <= 0.5) {
-      backgroundColor = LinearGradient.lerp(
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomRight,
-          colors: [
-            const Color.fromARGB(148, 113, 108, 173), // Rosado amanecer
-            const Color.fromARGB(255, 165, 220, 252), // Noche inicial
-          ],
-          stops: [0.0, 1.0],
-        ),
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 13, 110, 221), // mediodía
-            const Color.fromARGB(255, 201, 223, 252),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        dayProgress / 0.25,
-      )!;
-    } else if (dayProgress < 0.675) {
-      backgroundColor = LinearGradient.lerp(
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 62, 122, 199),
-            const Color.fromARGB(255, 255, 234, 234),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 20, 122, 255), // mediodía
-            const Color.fromARGB(255, 253, 229, 229),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        dayProgress / 0.25,
-      )!;
-    } else if (dayProgress <= 0.75) {
-      backgroundColor = LinearGradient.lerp(
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 255, 221, 221), //mediodía
-            const Color.fromARGB(255, 255, 0, 0),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 46, 171, 255), // atardecer
-            const Color.fromARGB(255, 253, 115, 61),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        (dayProgress - 0.25) / 0.25,
-      )!;
-    } else if (dayProgress <= 0.89) {
-      backgroundColor = LinearGradient.lerp(
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 46, 171, 255), // atardecer
-            const Color.fromARGB(255, 253, 115, 61),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 29, 157, 189), // Atardecer
-            const Color.fromARGB(183, 255, 124, 72),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        (dayProgress - 0.75) / 0.25,
-      )!;
-    } else {
-      backgroundColor = LinearGradient.lerp(
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 0, 204, 255), // Atardecer
-            const Color.fromARGB(108, 255, 110, 53),
-          ],
-          stops: [0.0, 1.0],
-        ),
-        LinearGradient(
-          begin: Alignment.topCenter,
-          end: Alignment.bottomCenter,
-          colors: [
-            const Color.fromARGB(255, 10, 10, 30), // Negro
-            const Color.fromARGB(255, 5, 5, 15), // Más oscuro
-          ],
-          stops: [0.0, 1.0],
-        ),
-        (dayProgress - 0.75) / 0.25,
-      )!;
+    final dayPhase = getDayPhase(dayProgress, totalDuration);
+    const int alpha = 255;
+
+    switch (dayPhase) {
+      case DayPhase.dawn:
+        backgroundColor = lerpGradient(
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 20, 20, 40), // Noche inicial
+              const Color.fromARGB(alpha, 134, 106, 191),
+              const Color.fromARGB(alpha, 255, 157, 173), // Rosado amanecer
+              const Color.fromARGB(alpha, 255, 241, 147),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(255, 124, 206, 253),
+              const Color.fromARGB(alpha, 124, 207, 255),
+              const Color.fromARGB(alpha, 110, 190, 255),
+              const Color.fromARGB(alpha, 255, 241, 147),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          ((dayProgress + 0.0417) / (0.0833 + 0.0417)).clamp(0.0, 1.0),
+        );
+        break;
+      case DayPhase.morning:
+        backgroundColor = lerpGradient(
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomRight,
+            colors: [
+              const Color.fromARGB(alpha, 51, 156, 218),
+              const Color.fromARGB(alpha, 67, 169, 252),
+              const Color.fromARGB(alpha, 67, 169, 252),
+              const Color.fromARGB(alpha, 255, 241, 147),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 33, 136, 253),
+              const Color.fromARGB(alpha, 67, 169, 252),
+              const Color.fromARGB(alpha, 65, 147, 241),
+              const Color.fromARGB(alpha, 148, 194, 255),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          ((dayProgress - 0.0833) / (0.4167 - 0.0833)).clamp(0.0, 1.0),
+        );
+        break;
+
+      case DayPhase.noon:
+        backgroundColor = lerpGradient(
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 33, 136, 253),
+              const Color.fromARGB(alpha, 67, 169, 252),
+              const Color.fromARGB(alpha, 65, 147, 241),
+              const Color.fromARGB(alpha, 148, 194, 255),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 71, 155, 252),
+              const Color.fromARGB(alpha, 67, 169, 252),
+              const Color.fromARGB(alpha, 80, 150, 230),
+              const Color.fromARGB(alpha, 148, 194, 255),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          ((dayProgress - 0.4167) / (0.6667 - 0.4167)).clamp(0.0, 1.0),
+        );
+        break;
+      case DayPhase.afternoon:
+        backgroundColor = lerpGradient(
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 71, 155, 252),
+              const Color.fromARGB(alpha, 67, 169, 252),
+              const Color.fromARGB(alpha, 80, 150, 230),
+              const Color.fromARGB(alpha, 148, 194, 255),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 79, 120, 192),
+              const Color.fromARGB(255, 154, 132, 252),
+              const Color.fromARGB(255, 222, 164, 255),
+              const Color.fromARGB(alpha, 255, 213, 154),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          ((dayProgress - 0.6667) / (1.0 - 0.6667)).clamp(0.0, 1.0),
+        );
+        break;
+      case DayPhase.sunset:
+        backgroundColor = lerpGradient(
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha - 50, 79, 120, 192),
+              const Color.fromARGB(alpha, 252, 132, 188),
+              const Color.fromARGB(alpha, 255, 164, 165),
+              const Color.fromARGB(alpha, 255, 213, 154),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha - 50, 79, 120, 192),
+              const Color.fromARGB(alpha - 50, 252, 132, 188),
+              const Color.fromARGB(alpha - 50, 255, 164, 165), // atardecer
+              const Color.fromARGB(alpha - 50, 255, 213, 154),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          ((dayProgress - 1.0) / (1.1667 - 1.0)).clamp(0.0, 1.0),
+        );
+        break;
+
+      case DayPhase.night || DayPhase.nightBefore:
+        double t;
+        if (dayProgress < -0.0417) {
+          t = 1.0;
+        } else if (dayProgress > 1.1667) {
+          t = 1.0;
+        } else {
+          t = ((dayProgress - 1.0) / (1.1667 - 1.0)).clamp(0.0, 1.0);
+        }
+
+        backgroundColor = lerpGradient(
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 22, 22, 51),
+              const Color.fromARGB(alpha, 42, 37, 78),
+              const Color.fromARGB(alpha, 14, 10, 20),
+              const Color.fromARGB(alpha, 33, 23, 48),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          LinearGradient(
+            begin: Alignment.topCenter,
+            end: Alignment.bottomCenter,
+            colors: [
+              const Color.fromARGB(alpha, 22, 22, 51),
+              const Color.fromARGB(alpha, 42, 37, 78),
+              const Color.fromARGB(alpha, 14, 10, 20),
+              const Color.fromARGB(alpha, 33, 23, 48),
+            ],
+            stops: [0.0, 0.4, 0.7, 1.0],
+          ),
+          t,
+        );
+        break;
     }
 
     backgroundColor = applyWeatherTimeToBackground(
       backgroundColor,
       weathercode,
+      cloudCover,
+      dayProgress,
     );
 
     backgroundPaint.shader = backgroundColor.createShader(
@@ -3646,7 +4101,11 @@ class CloudyBakcgroundPainter extends CustomPainter {
 
     final double normalizedCloudCover = (cloudCover / 100.0).clamp(0.0, 1.0);
 
-    cloud1Color = applyWeatherTimeToclouds(cloud1Color, weathercode);
+    cloud1Color = applyWeatherTimeToclouds(
+      cloud1Color,
+      weathercode,
+      dayProgress,
+    );
 
     paintDynamicClouds(
       canvas,
@@ -3657,42 +4116,6 @@ class CloudyBakcgroundPainter extends CustomPainter {
       baseOffsets,
       cloud1Color,
     );
-
-    // Paleta para la línea
-    final Color lineColor;
-    if (dayProgress < 0.5) {
-      lineColor =
-          Color.lerp(
-            const Color.fromARGB(36, 255, 238, 0), // Amanecer
-            const Color.fromARGB(38, 60, 255, 0), // Mediodía
-            dayProgress * 2,
-          ) ??
-          const Color.fromARGB(146, 60, 255, 0);
-    } else if (dayProgress < 0.75) {
-      lineColor =
-          Color.lerp(
-            const Color.fromARGB(8, 60, 255, 0), // Mediodía
-            const Color.fromARGB(146, 178, 34, 34), // Atardecer
-            (dayProgress - 0.5) * 4,
-          ) ??
-          const Color.fromARGB(146, 60, 255, 0);
-    } else {
-      lineColor =
-          Color.lerp(
-            const Color.fromARGB(48, 255, 22, 22), // Atardecer
-            const Color.fromARGB(34, 249, 255, 158), // Noche
-            (dayProgress - 0.75) * 4,
-          ) ??
-          const Color.fromARGB(146, 0, 0, 205);
-    }
-
-    paint.color = lineColor;
-    paint.strokeWidth = 100;
-    canvas.drawLine(
-      Offset(size.width - 600, size.height),
-      Offset(size.width, size.height),
-      paint,
-    );
   }
 
   @override
@@ -3749,6 +4172,8 @@ class SunPathPainter extends CustomPainter {
   void paint(Canvas canvas, Size size) {
     if (progress < 0.0) {
       progress = 0.0;
+    } else if (progress > 1.0) {
+      progress = 1.0;
     }
 
     final paintCurve = Paint()
diff --git a/lib/metar_weather_api.dart b/lib/metar_weather_api.dart
index 4b14feb..0a9b38f 100644
--- a/lib/metar_weather_api.dart
+++ b/lib/metar_weather_api.dart
@@ -6,6 +6,9 @@ import 'package:flutter_timezone/flutter_timezone.dart';
 import 'package:geolocator/geolocator.dart';
 import 'package:geocoding/geocoding.dart';
 import 'package:http/http.dart' as http;
+import 'package:nominatim_flutter/model/request/reverse_request.dart';
+import 'package:nominatim_flutter/model/response/status_response.dart';
+import 'package:nominatim_flutter/nominatim_flutter.dart';
 import 'package:shared_preferences/shared_preferences.dart';
 import 'dart:convert';
 import 'dart:async';
@@ -79,7 +82,7 @@ class WeatherService with ChangeNotifier {
   var siteName = "";
   var country = "";
   var _currentPosition = {};
-  var _lastPosition = {};
+  Map<dynamic, dynamic>? _lastPosition;
 
   Map<String, dynamic>? decodeJson(String jsonString) {
     return jsonDecode(jsonString) as Map<String, dynamic>?;
@@ -125,8 +128,8 @@ class WeatherService with ChangeNotifier {
         _currentPosition["latitude"] != null &&
             _currentPosition["longitude"] != null
         ? _currentPosition
-        : (_lastPosition["latitude"] != null &&
-                  _lastPosition["longitude"] != null
+        : (_lastPosition?["latitude"] != null &&
+                  _lastPosition?["longitude"] != null
               ? _lastPosition
               : null);
 
@@ -155,6 +158,74 @@ class WeatherService with ChangeNotifier {
     }
   }
 
+  Future<Map> updateSiteNameReturn(double latitude, double longitude) async {
+    String safeSiteName = "Ubicación desconocida.";
+    String currentCountry = "";
+    debugPrint("UpdateSiteNameReturn");
+    try {
+      List<Placemark> placemarks = await placemarkFromCoordinates(
+        latitude,
+        longitude,
+      );
+
+      if (placemarks.isNotEmpty) {
+        safeSiteName =
+            placemarks.first.locality ??
+            placemarks.first.subLocality ??
+            placemarks.first.street ??
+            "Ubicación desconocida.";
+        currentCountry = placemarks.first.isoCountryCode!;
+      }
+    } catch (e) {
+      debugPrint("Error al obtener el nombre de localidad: $e");
+    }
+
+    return {"siteName": safeSiteName, "country": currentCountry};
+  }
+
+  Future<Map> NewUpdateSiteName(double latitude, double longitude) async {
+    String safeSiteName = "Ubicación desconocida.";
+    String currentCountry = "";
+
+    NominatimFlutter.instance.configureNominatim(
+      useCacheInterceptor: true,
+      maxStale: const Duration(days: 7),
+    );
+    debugPrint("NewUpdateSiteName");
+
+    try {
+      final reverseRequest = ReverseRequest(
+        lat: latitude,
+        lon: longitude,
+        addressDetails: true,
+        extraTags: true,
+        nameDetails: true,
+      );
+
+      final statusResult = await NominatimFlutter.instance.status();
+      if (statusResult.status == Status.ok) {
+        final reverseResult = await NominatimFlutter.instance.reverse(
+          reverseRequest: reverseRequest,
+          language: "es-ES,es;q=0.5",
+        );
+
+        safeSiteName =
+            reverseResult.address?["neighbourhood"] ??
+            reverseResult.address?["town"] ??
+            reverseResult.address?["county"] ??
+            reverseResult.address?["province"] ??
+            "Ubicación desconocida.";
+
+        currentCountry =
+            reverseResult.address?["country"] ?? "Ubicación desconocida.";
+      }
+    } catch (e) {
+      debugPrint("Error al obtener el nombre de localidad: $e");
+    }
+
+    return {"siteName": safeSiteName, "country": currentCountry};
+  }
+
   Future<void> getPrecisePosition() async {
     final prefs = await SharedPreferences.getInstance();
     final cacheKey = "metar_last_position";
@@ -183,10 +254,17 @@ class WeatherService with ChangeNotifier {
         var newPosition = await Geolocator.getCurrentPosition(
           desiredAccuracy: LocationAccuracy.best,
         );
+        final placemarks = await updateSiteNameReturn(
+          newPosition.latitude,
+          newPosition.longitude,
+        );
+
         currentPosition = {
           "latitude": newPosition.latitude,
           "longitude": newPosition.longitude,
           "timeStamp": DateTime.now().millisecondsSinceEpoch,
+          "siteName": placemarks["siteName"],
+          "country": placemarks["country"],
           "timezone": currentTimezone,
         };
         final success = await prefs.setString(
@@ -197,7 +275,8 @@ class WeatherService with ChangeNotifier {
       }
 
       _currentPosition = currentPosition;
-      await updateSiteName();
+      siteName = currentPosition["siteName"];
+      country = currentPosition["country"];
 
       debugPrint(
         "${_currentPosition["latitude"]}, ${_currentPosition["longitude"]}",
@@ -219,7 +298,7 @@ class WeatherService with ChangeNotifier {
     debugPrint("getPrecisePositionLocationMethod Iniciada.");
     try {
       final cachedPositionJson = prefs.getString(cacheKey);
-      if (cachedPositionJson != null) {
+      if (cachedPositionJson != null && cachedPositionJson.isNotEmpty) {
         final decodedPositionCache = jsonDecode(cachedPositionJson);
         final timeStamp = decodedPositionCache["timeStamp"] ?? 0;
         if (decodedPositionCache["timezone"] == null) {
@@ -229,6 +308,8 @@ class WeatherService with ChangeNotifier {
         if (DateTime.now().millisecondsSinceEpoch - timeStamp < 2 * 60 * 1000) {
           debugPrint("Usando posición mejorada cacheada.");
           currentPosition = decodedPositionCache;
+          siteName = decodedPositionCache["siteName"];
+          country = decodedPositionCache["country"];
         }
       } else {
         debugPrint("Caché de posición expirado, buscando nueva posición.");
@@ -239,21 +320,28 @@ class WeatherService with ChangeNotifier {
         var newPosition = await locService.getLocation().timeout(
           Duration(seconds: 30),
         );
+
+        final placemarks = await NewUpdateSiteName(
+          newPosition.latitude ?? 0.0,
+          newPosition.longitude ?? 0.0,
+        );
+
         currentPosition = {
           "latitude": newPosition.latitude,
           "longitude": newPosition.longitude,
           "timeStamp": DateTime.now().millisecondsSinceEpoch,
+          "siteName": placemarks["siteName"],
+          "country": placemarks["country"],
           "timezone": currentTimezone,
         };
-        final success = await prefs.setString(
-          cacheKey,
-          json.encode(currentPosition),
-        );
+        final currentPositionJson = jsonEncode(currentPosition);
+        final success = await prefs.setString(cacheKey, currentPositionJson);
         debugPrint("¿Guardado posición en caché?: $success");
       }
 
       _currentPosition = currentPosition;
-      await updateSiteName();
+      siteName = currentPosition["siteName"] ?? "Desconocido";
+      country = currentPosition["country"] ?? "Desconocido";
 
       debugPrint(
         "${_currentPosition["latitude"]}, ${_currentPosition["longitude"]}",
@@ -292,31 +380,41 @@ class WeatherService with ChangeNotifier {
           debugPrint("CachedPosition");
           freshPositionData = decodedPositionCache;
           _currentPosition = freshPositionData!;
+          siteName = decodedPositionCache["siteName"];
+          country = decodedPositionCache["country"];
         }
       } else {
         debugPrint("Caché de posición expirado, buscando nueva posición.");
       }
       try {
-        if (freshPositionData == null || hasMovedSignificantly()) {
+        if (freshPositionData == null ||
+            (_lastPosition != null && hasMovedSignificantly())) {
           newPosition = await Geolocator.getLastKnownPosition();
-          if (newPosition != null) {
-            newPosition = await Geolocator.getCurrentPosition(
-              desiredAccuracy: LocationAccuracy.low,
-              timeLimit: Duration(seconds: 30),
-            );
-          }
+          newPosition ??= await Geolocator.getCurrentPosition(
+            desiredAccuracy: LocationAccuracy.low,
+            timeLimit: Duration(seconds: 30),
+          );
+
+          final placemarks = await NewUpdateSiteName(
+            newPosition.latitude,
+            newPosition.longitude,
+          );
 
           freshPositionData = {
-            "latitude": newPosition?.latitude ?? 0.0,
-            "longitude": newPosition?.longitude ?? 0.0,
+            "latitude": newPosition.latitude,
+            "longitude": newPosition.longitude,
+            "siteName": placemarks["siteName"],
+            "country": placemarks["country"],
             "timeStamp": DateTime.now().millisecondsSinceEpoch,
             "timezone": currentTimezone,
           };
-          final success = await prefs.setString(
-            cacheKey,
-            json.encode(freshPositionData),
-          );
+
+          final freshPositionJson = jsonEncode(freshPositionData);
+          final success = await prefs.setString(cacheKey, freshPositionJson);
           debugPrint("¿Guardado posición en caché?: $success");
+
+          siteName = freshPositionData["siteName"] ?? "Desconocido";
+          country = freshPositionData["country"] ?? "Desconocido";
         }
       } catch (e) {
         debugPrint("Ha ocurrido un error al obtener la ubicación: $e");
@@ -330,12 +428,11 @@ class WeatherService with ChangeNotifier {
     if (freshPositionData != null) {
       _currentPosition = freshPositionData;
 
-      var lat = _currentPosition["latitude"] ?? _lastPosition["latitude"];
-      var long = _currentPosition["longitude"] ?? _lastPosition["longitude"];
+      var lat = _currentPosition["latitude"] ?? _lastPosition?["latitude"];
+      var long = _currentPosition["longitude"] ?? _lastPosition?["longitude"];
 
       debugPrint("Usando currentPosition: $lat, $long");
     }
-    await updateSiteName();
     notifyListeners();
   }
 
@@ -380,8 +477,8 @@ class WeatherService with ChangeNotifier {
     // Extraer las latitudes y longitudes de los mapas
     final double currentLat = _currentPosition["latitude"] as double;
     final double currentLon = _currentPosition["longitude"] as double;
-    final double lastLat = _lastPosition["latitude"] as double;
-    final double lastLon = _lastPosition["longitude"] as double;
+    final double lastLat = _lastPosition?["latitude"] as double;
+    final double lastLon = _lastPosition?["longitude"] as double;
 
     // Calcular la distancia en metros usando geolocator
     final double distanceInMeters = Geolocator.distanceBetween(
@@ -463,7 +560,7 @@ class WeatherService with ChangeNotifier {
 
             meteoFuture = client.get(
               Uri.parse(
-                "https://api.open-meteo.com/v1/forecast?latitude=${_currentPosition["latitude"]}&longitude=${_currentPosition["longitude"]}&current=is_day,precipitation,showers,snowfall,wind_gusts_10m,pressure_msl,cloud_cover,weather_code&timezone=${_lastPosition["timezone"]}",
+                "https://api.open-meteo.com/v1/forecast?latitude=${_currentPosition["latitude"]}&longitude=${_currentPosition["longitude"]}&current=is_day,precipitation,showers,snowfall,wind_gusts_10m,pressure_msl,cloud_cover,weather_code&timezone=${_lastPosition?["timezone"]}",
               ),
             );
 
@@ -507,8 +604,25 @@ class WeatherService with ChangeNotifier {
           DateTime? dateTime;
           double? windKmh, windDirection;
 
+          if (lines == null || lines.isEmpty) {
+            debugPrint("Las lines están vacías.");
+            return;
+          }
+
+          if (forecastCachedData == null || forecastCachedData!.isEmpty) {
+            debugPrint("Forecast data está vacío.");
+            return;
+          }
+
+          if (!forecastCachedData!.containsKey("tempByHours") ||
+              forecastCachedData!["tempByHours"] == null ||
+              forecastCachedData!["tempByHours"].isEmpty) {
+            debugPrint("Error: forecastCachedData['tempByHours'] está vacío.");
+            return;
+          }
+
           try {
-            for (var line in lines!) {
+            for (var line in lines) {
               final parts = line.trim().split(" ");
               for (var part in parts) {
                 if (part.length == 7 && part.endsWith("Z")) {
@@ -530,7 +644,7 @@ class WeatherService with ChangeNotifier {
                     var initialTemp = tempDew[0].replaceFirst("M", "-");
                     var normalizedTemp =
                         (int.parse(initialTemp) * 0.4) +
-                        (forecastCachedData!["tempByHours"][0] * 0.6);
+                        (await forecastCachedData?["tempByHours"][0] * 0.6);
 
                     temp = normalizedTemp.toString();
 
@@ -631,7 +745,7 @@ class WeatherService with ChangeNotifier {
             dataToUse = {
               "temperature": tempC,
               "dewPoint": dewPointC,
-              "humidity": humidity.roundToDouble().clamp(0, 100),
+              "humidity": humidity.roundToDouble().clamp(0.0, 100.0),
               "windSpeed": windKmh,
               "windDirection": windDirection,
               "heatIndex": heatIndex.toStringAsFixed(2),
@@ -678,7 +792,7 @@ class WeatherService with ChangeNotifier {
 
             debugPrint("¿Guardado el tiempo en caché?: $success");
           } else {
-            throw Exception("No se pudo obtener la información del clima");
+            debugPrint("No se pudo obtener la información del clima");
           }
         }
       }
@@ -688,157 +802,6 @@ class WeatherService with ChangeNotifier {
     }();
   }
 
-  Future<Map> getPositionBackground() async {
-    debugPrint("Get position background");
-    final prefs = await SharedPreferences.getInstance();
-    final cacheKey = "metar_last_position";
-    Map<String, dynamic>? freshPositionData;
-    final String currentTimezone = await FlutterTimezone.getLocalTimezone();
-    final locService = loc.Location();
-
-    try {
-      final cachedPositionJson = prefs.getString(cacheKey);
-      if (cachedPositionJson != null) {
-        final decodedPositionCache = jsonDecode(cachedPositionJson);
-        final timeStamp = decodedPositionCache["timeStamp"] ?? 0;
-        if (decodedPositionCache["timezone"] == null) {
-          decodedPositionCache["timezone"] = currentTimezone;
-        }
-        if (DateTime.now().millisecondsSinceEpoch - timeStamp <
-            10 * 60 * 1000) {
-          freshPositionData = decodedPositionCache;
-        }
-      } else {
-        debugPrint("Caché de posición expirado, buscando nueva posición.");
-      }
-      try {
-        if (freshPositionData == null) {
-          locService.changeSettings(accuracy: loc.LocationAccuracy.low);
-          var newPosition = await locService.getLocation().timeout(
-            Duration(seconds: 30),
-          );
-
-          freshPositionData = {
-            "latitude": newPosition.latitude,
-            "longitude": newPosition.longitude,
-            "timeStamp": DateTime.now().millisecondsSinceEpoch,
-            "timezone": currentTimezone,
-          };
-          final success = await prefs.setString(
-            cacheKey,
-            json.encode(freshPositionData),
-          );
-          debugPrint("¿Guardado posición en caché?: $success");
-        }
-      } catch (e) {
-        debugPrint("Ha ocurrido un error al obtener la ubicación: $e");
-      }
-    } catch (e) {
-      debugPrint("Error al obtener la ubicación: $e");
-    }
-
-    return freshPositionData ?? {};
-  }
-
-  Future<Map<String, dynamic>> fetchDataBackground() async {
-    final prefs = await SharedPreferences.getInstance();
-    final cacheKey = "background_MetarData";
-    final cachedData = prefs.getString(cacheKey);
-    http.Response? forecastHourlyResponse;
-    http.Response? meteoResponse;
-    Map<String, dynamic>? dataToUse;
-
-    //Verificar si hay datos en la memoria caché
-    debugPrint("Empezando metar background");
-    if (cachedData != null) {
-      final data = jsonDecode(cachedData);
-      final timeStamp = data["timeStamp"] ?? 0;
-      if (DateTime.now().millisecondsSinceEpoch - timeStamp < 10 * 60 * 1000) {
-        dataToUse = data;
-        debugPrint("Usando los datos en caché (Una hora).");
-      }
-    }
-
-    final position = await getPositionBackground();
-    final timezone = position["timezone"] ?? "auto";
-
-    if (dataToUse == null) {
-      try {
-        meteoResponse = await retry(
-          () => http.get(
-            Uri.parse(
-              "https://api.open-meteo.com/v1/forecast?latitude=${position["latitude"]}&longitude=${position["longitude"]}&current=cloud_cover&timezone=$timezone",
-            ),
-          ),
-          maxAttempts: 3,
-          delayFactor: Duration(seconds: 3),
-        );
-
-        forecastHourlyResponse = await retry(
-          () => http.get(
-            Uri.parse(
-              "https://api.open-meteo.com/v1/forecast?latitude=${position["latitude"]}&longitude=${position["longitude"]}&hourly=temperature_2m,precipitation_probability,uv_index&timezone=$timezone",
-            ),
-          ),
-          maxAttempts: 3,
-          delayFactor: Duration(seconds: 3),
-        );
-      } catch (e) {
-        debugPrint(
-          "Ha ocurrido un error al sacar los datos en segundo plano $e",
-        );
-      }
-      if (meteoResponse?.statusCode == 200 &&
-          forecastHourlyResponse?.statusCode == 200) {
-        //Datos de api externa
-        final externalData = jsonDecode(meteoResponse!.body);
-        final houtlyData = jsonDecode(forecastHourlyResponse!.body);
-
-        final hourlyTemp = houtlyData["hourly"]["temperature_2m"];
-        final hourlyTime = houtlyData["hourly"]["time"];
-        final hourlyPrecipitationProbability =
-            houtlyData["hourly"]["precipitation_probability"];
-
-        double? temperatureIn8Hours;
-        double? precipitationProbabilityIn8Hours;
-
-        Duration smallestDifference = Duration(days: 999);
-
-        var now = DateTime.now().toLocal();
-        final limit = now.add(const Duration(hours: 8));
-
-        for (int i = 0; i < hourlyTime.length; i++) {
-          var parsed = DateTime.parse(hourlyTime[i]).toLocal();
-          Duration difference = parsed.difference(limit).abs();
-          if (parsed.isAfter(now) || parsed.isAtSameMomentAs(now)) {
-            if (difference < smallestDifference) {
-              smallestDifference = difference;
-              temperatureIn8Hours = (hourlyTemp[i] as num).toDouble();
-              precipitationProbabilityIn8Hours =
-                  (hourlyPrecipitationProbability[i] as num).toDouble();
-            }
-          }
-        }
-
-        dataToUse = {
-          "temperature": temperatureIn8Hours,
-          "cloudCover": externalData["current"]["cloud_cover"] / 100 * 100,
-          "precipitation": precipitationProbabilityIn8Hours,
-          "dateTime": DateTime.now().toString(),
-          "currentPrecipitation": externalData["current"]["precipitation"],
-          "currentShowers": externalData["current"]["showers"],
-          "currentSnowfall": externalData["current"]["snowfall"],
-          "timeStamp": DateTime.now().millisecondsSinceEpoch,
-        };
-
-        //Guardar caché
-        final success = await prefs.setString(cacheKey, json.encode(dataToUse));
-        debugPrint("¿Guardado en caché segundo plano?: $success");
-      }
-    }
-    return dataToUse ?? {};
-  }
-
   Future<void> getForecast() async {
     final startTime = DateTime.now();
     final prefs = await SharedPreferences.getInstance();
@@ -873,13 +836,13 @@ class WeatherService with ChangeNotifier {
           Future<http.Response> forecastDailyFuture;
           forecastHourlyFuture = client.get(
             Uri.parse(
-              "https://api.open-meteo.com/v1/forecast?latitude=${_currentPosition["latitude"]}&longitude=${_currentPosition["longitude"]}&hourly=temperature_2m,precipitation_probability,rain,snowfall,showers,uv_index,weather_code&timezone=${_lastPosition["timezone"]}",
+              "https://api.open-meteo.com/v1/forecast?latitude=${_currentPosition["latitude"]}&longitude=${_currentPosition["longitude"]}&hourly=temperature_2m,precipitation_probability,rain,snowfall,showers,uv_index,weather_code&timezone=${_lastPosition?["timezone"]}",
             ),
           );
 
           forecastDailyFuture = client.get(
             Uri.parse(
-              "https://api.open-meteo.com/v1/forecast?latitude=${_currentPosition["latitude"]}&longitude=${_currentPosition["longitude"]}&daily=sunrise,sunset,daylight_duration&timezone=${_lastPosition["timezone"]}",
+              "https://api.open-meteo.com/v1/forecast?latitude=${_currentPosition["latitude"]}&longitude=${_currentPosition["longitude"]}&daily=sunrise,sunset,daylight_duration&timezone=${_lastPosition?["timezone"]}",
             ),
           );
 
@@ -897,12 +860,18 @@ class WeatherService with ChangeNotifier {
 
         if (forecastHourlyResponse!.statusCode == 200 &&
             forecastDailyResponse!.statusCode == 200) {
+          //Hourly Data
           final hourlyData = jsonDecode(forecastHourlyResponse!.body);
           final hourlyTemp = hourlyData["hourly"]["temperature_2m"];
-          final hourlyTime = hourlyData["hourly"]["time"];
+          final List hourlyTime = hourlyData["hourly"]["time"];
           final hourlyPrecipitationProbability =
               hourlyData["hourly"]["precipitation_probability"];
           final hourlyUVIndex = hourlyData["hourly"]["uv_index"];
+          //Daily Data
+          final dailyData = jsonDecode(forecastDailyResponse!.body);
+          final dailySunrise = dailyData["daily"]["sunrise"][0];
+          final dailySunset = dailyData["daily"]["sunset"][0];
+          final daylightDuration = dailyData["daily"]["daylight_duration"][0];
 
           //final snowfall = hourlyData["hourly"]["snowfall"];
           //final rain = hourlyData["hourly"]["rain"];
@@ -975,6 +944,10 @@ class WeatherService with ChangeNotifier {
             weekDays.add(dayName[0].toUpperCase() + dayName.substring(1));
           }
 
+          //Sunrise en DateTime para comparar
+          final sunsetDatetime = DateTime.parse(dailySunset).toLocal();
+          final sunriseDatetime = DateTime.parse(dailySunrise).toLocal();
+
           for (int i = 0; i < hourlyTime.length; i++) {
             var parsed = DateTime.parse(hourlyTime[i]).toLocal();
             if (parsed.isAfter(now) &&
@@ -986,37 +959,126 @@ class WeatherService with ChangeNotifier {
               parsedTemp.add(hourlyTemp[i].toDouble());
 
               //var maxValue = max(showers[i], max(snowfall[i], rain[i]));
-              final isLikeRainin = hourlyPrecipitationProbability[i] >= 0;
+              final bool isLikeRaining =
+                  hourlyPrecipitationProbability[i] >= 10;
+
+              final DateTime sunset = DateTime(
+                parsed.day == now.day
+                    ? now.year
+                    : now.year + (parsed.year > now.year ? 1 : 0),
+                parsed.day == now.day
+                    ? now.month
+                    : now.month + (parsed.month > now.month ? 1 : 0),
+                parsed.day == now.day ? now.day : now.day + 1,
+                sunsetDatetime.hour,
+                sunsetDatetime.minute,
+                sunsetDatetime.second,
+              );
+
+              final DateTime sunrise = DateTime(
+                parsed.day == now.day
+                    ? now.year
+                    : now.year + (parsed.year > now.year ? 1 : 0),
+                parsed.day == now.day
+                    ? now.month
+                    : now.month + (parsed.month > now.month ? 1 : 0),
+                parsed.day == now.day ? now.day : now.day + 1,
+                sunriseDatetime.hour,
+                sunriseDatetime.minute,
+                sunriseDatetime.second,
+              );
+
+              final bool isNight =
+                  (parsed.isAfter(sunset) &&
+                      parsed.isBefore(sunrise.add(Duration(days: 1)))) ||
+                  (parsed.isAfter(sunset.subtract(Duration(days: 1))) &&
+                      parsed.isBefore(sunrise));
+
               String precipitationType;
               final weatherRange = WeatherCodesRanges(
                 weatherCode: hourlyWeatherCode[i],
               );
+
               switch (weatherRange.description) {
                 case Condition.cloudy:
-                  precipitationType = isLikeRainin ? "🌧️" : "☁️";
+                  if (isLikeRaining) {
+                    precipitationType = isNight
+                        ? '\uF02B' // night_alt_sprinkle (llovizna nocturna)
+                        : '\uF008'; // day_sprinkle (llovizna diurna)
+                  } else {
+                    precipitationType = isNight
+                        ? '\uF086' // night_cloudy (o night_alt_cloudy \uF02E)
+                        : '\uf002'; // day_cloudy
+                  }
+                  break;
+
                 case Condition.clear:
-                  precipitationType = isLikeRainin ? "🌤️" : "☀️";
+                  precipitationType = isNight
+                      ? '\uF02E' // night_clear
+                      : '\uF00D'; // day_sunny
+                  break;
+
                 case Condition.rain:
-                  precipitationType = "🌧️";
+                  precipitationType = isNight
+                      ? '\uF036' // night_rain
+                      : '\uF008'; // day_rain
+                  break;
+
                 case Condition.rainShowers:
-                  precipitationType = "☔";
+                  precipitationType = isNight
+                      ? '\uF037' // night_showers
+                      : '\uF00B'; // day_showers
+                  break;
+
                 case Condition.freezingRain:
-                  precipitationType = "🧊";
+                  precipitationType = isNight
+                      ? '\uF025' // night_alt_rain_mix (lluvia helada nocturna)
+                      : '\uF006'; // day_rain_mix (lluvia helada diurna)
+                  break;
+
                 case Condition.drizzle:
-                  precipitationType = "💧";
+                  precipitationType = isNight
+                      ? '\uF02B' // night_alt_sprinkle
+                      : '\uF008'; // day_sprinkle
+                  break;
+
                 case Condition.freezingDrizzle:
-                  precipitationType = "🌨️";
+                  precipitationType = isNight
+                      ? '\uF0B5' // night_alt_sleet (o sleet \uF0B5)
+                      : '\uF0B6'; // day_sleet (o sleet \uF0B5)
+                  break;
+
                 case Condition.thunderstorm:
-                  precipitationType = "⛈️";
+                  precipitationType = isNight
+                      ? '\uF03C' // night_thunderstorm
+                      : '\uF010'; // day_thunderstorm
+                  break;
+
                 case Condition.snowFall:
                 case Condition.snowGrains:
                 case Condition.snowShowers:
-                  precipitationType = "❄️";
+                  precipitationType = isNight
+                      ? '\uF038' // night_snow
+                      : '\uF00C'; // day_snow
+                  break;
+
                 case Condition.thunderstormWithHail:
-                  precipitationType = "🧊";
+                  precipitationType = isNight
+                      ? '\uF03C' // night_thunderstorm (no hay ícono específico con granizo)
+                      : '\uF010'; // day_thunderstorm (no hay ícono específico con granizo)
+                  break;
+
+                //Añadir condicion para hail
+                // \uF004 o \uF064 'hail'.
+                // case Condition.hail:
+                //   precipitationType = '\uF064'; // hail icon
+                //   break;
 
-                case _:
-                  precipitationType = "☀️";
+                default:
+                  precipitationType = isNight
+                      ? '\uF02E' // night_clear
+                      : '\uF00D'; // day_sunny
+                  break;
               }
 
               precipitationTypes.add(precipitationType);
@@ -1030,10 +1092,6 @@ class WeatherService with ChangeNotifier {
             }
           }
 
-          final dailyData = jsonDecode(forecastDailyResponse!.body);
-          final dailySunrise = dailyData["daily"]["sunrise"][0];
-          final dailySunset = dailyData["daily"]["sunset"][0];
-          final daylightDuration = dailyData["daily"]["daylight_duration"][0];
           var maxTemp = parsedTemp.reduce(
             (currentMax, element) =>
                 element > currentMax ? element : currentMax,
@@ -1079,6 +1137,157 @@ class WeatherService with ChangeNotifier {
     }();
   }
 
+  Future<Map> getPositionBackground() async {
+    debugPrint("Get position background");
+    final prefs = await SharedPreferences.getInstance();
+    final cacheKey = "metar_last_position";
+    Map<String, dynamic>? freshPositionData;
+    final String currentTimezone = await FlutterTimezone.getLocalTimezone();
+    final locService = loc.Location();
+
+    try {
+      final cachedPositionJson = prefs.getString(cacheKey);
+      if (cachedPositionJson != null) {
+        final decodedPositionCache = jsonDecode(cachedPositionJson);
+        final timeStamp = decodedPositionCache["timeStamp"] ?? 0;
+        if (decodedPositionCache["timezone"] == null) {
+          decodedPositionCache["timezone"] = currentTimezone;
+        }
+        if (DateTime.now().millisecondsSinceEpoch - timeStamp <
+            10 * 60 * 1000) {
+          freshPositionData = decodedPositionCache;
+        }
+      } else {
+        debugPrint("Caché de posición expirado, buscando nueva posición.");
+      }
+      try {
+        if (freshPositionData == null) {
+          locService.changeSettings(accuracy: loc.LocationAccuracy.low);
+          var newPosition = await locService.getLocation().timeout(
+            Duration(seconds: 30),
+          );
+
+          freshPositionData = {
+            "latitude": newPosition.latitude,
+            "longitude": newPosition.longitude,
+            "timeStamp": DateTime.now().millisecondsSinceEpoch,
+            "timezone": currentTimezone,
+          };
+          final success = await prefs.setString(
+            cacheKey,
+            json.encode(freshPositionData),
+          );
+          debugPrint("¿Guardado posición en caché?: $success");
+        }
+      } catch (e) {
+        debugPrint("Ha ocurrido un error al obtener la ubicación: $e");
+      }
+    } catch (e) {
+      debugPrint("Error al obtener la ubicación: $e");
+    }
+
+    return freshPositionData ?? {};
+  }
+
+  Future<Map<String, dynamic>> fetchDataBackground() async {
+    final prefs = await SharedPreferences.getInstance();
+    final cacheKey = "background_MetarData";
+    final cachedData = prefs.getString(cacheKey);
+    http.Response? forecastHourlyResponse;
+    http.Response? meteoResponse;
+    Map<String, dynamic>? dataToUse;
+
+    //Verificar si hay datos en la memoria caché
+    debugPrint("Empezando metar background");
+    if (cachedData != null) {
+      final data = jsonDecode(cachedData);
+      final timeStamp = data["timeStamp"] ?? 0;
+      if (DateTime.now().millisecondsSinceEpoch - timeStamp < 10 * 60 * 1000) {
+        dataToUse = data;
+        debugPrint("Usando los datos en caché (Una hora).");
+      }
+    }
+
+    final position = await getPositionBackground();
+    final timezone = position["timezone"] ?? "auto";
+
+    if (dataToUse == null) {
+      try {
+        meteoResponse = await retry(
+          () => http.get(
+            Uri.parse(
+              "https://api.open-meteo.com/v1/forecast?latitude=${position["latitude"]}&longitude=${position["longitude"]}&current=cloud_cover&timezone=$timezone",
+            ),
+          ),
+          maxAttempts: 3,
+          delayFactor: Duration(seconds: 3),
+        );
+
+        forecastHourlyResponse = await retry(
+          () => http.get(
+            Uri.parse(
+              "https://api.open-meteo.com/v1/forecast?latitude=${position["latitude"]}&longitude=${position["longitude"]}&hourly=temperature_2m,precipitation_probability,uv_index&timezone=$timezone",
+            ),
+          ),
+          maxAttempts: 3,
+          delayFactor: Duration(seconds: 3),
+        );
+      } catch (e) {
+        debugPrint(
+          "Ha ocurrido un error al sacar los datos en segundo plano $e",
+        );
+      }
+      if (meteoResponse?.statusCode == 200 &&
+          forecastHourlyResponse?.statusCode == 200) {
+        //Datos de api externa
+        final externalData = jsonDecode(meteoResponse!.body);
+        final houtlyData = jsonDecode(forecastHourlyResponse!.body);
+
+        final hourlyTemp = houtlyData["hourly"]["temperature_2m"];
+        final hourlyTime = houtlyData["hourly"]["time"];
+        final hourlyPrecipitationProbability =
+            houtlyData["hourly"]["precipitation_probability"];
+
+        double? temperatureIn8Hours;
+        double? precipitationProbabilityIn8Hours;
+
+        Duration smallestDifference = Duration(days: 999);
+
+        var now = DateTime.now().toLocal();
+        final limit = now.add(const Duration(hours: 8));
+
+        for (int i = 0; i < hourlyTime.length; i++) {
+          var parsed = DateTime.parse(hourlyTime[i]).toLocal();
+          Duration difference = parsed.difference(limit).abs();
+          if (parsed.isAfter(now) || parsed.isAtSameMomentAs(now)) {
+            if (difference < smallestDifference) {
+              smallestDifference = difference;
+              temperatureIn8Hours = (hourlyTemp[i] as num).toDouble();
+              precipitationProbabilityIn8Hours =
+                  (hourlyPrecipitationProbability[i] as num).toDouble();
+            }
+          }
+        }
+
+        dataToUse = {
+          "temperature": temperatureIn8Hours,
+          "cloudCover": externalData["current"]["cloud_cover"] / 100 * 100,
+          "precipitation": precipitationProbabilityIn8Hours,
+          "dateTime": DateTime.now().toString(),
+          "currentPrecipitation": externalData["current"]["precipitation"],
+          "currentShowers": externalData["current"]["showers"],
+          "currentSnowfall": externalData["current"]["snowfall"],
+          "timeStamp": DateTime.now().millisecondsSinceEpoch,
+        };
+
+        //Guardar caché
+        final success = await prefs.setString(cacheKey, json.encode(dataToUse));
+        debugPrint("¿Guardado en caché segundo plano?: $success");
+      }
+    }
+    return dataToUse ?? {};
+  }
+
   int? calcularICA(double concentracion, List breakpoints) {
     for (final bp in breakpoints) {
       if (concentracion >= bp.clo && concentracion <= bp.chi) {
diff --git a/pubspec.lock b/pubspec.lock
index b5a1b4a..66a03f3 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -113,6 +113,30 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "0.7.11"
+  dio:
+    dependency: transitive
+    description:
+      name: dio
+      sha256: d90ee57923d1828ac14e492ca49440f65477f4bb1263575900be731a3dac66a9
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.9.0"
+  dio_cache_interceptor:
+    dependency: transitive
+    description:
+      name: dio_cache_interceptor
+      sha256: "1346705a2057c265014d7696e3e2318b560bfb00b484dac7f9b01e2ceaebb07d"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.5.1"
+  dio_web_adapter:
+    dependency: transitive
+    description:
+      name: dio_web_adapter
+      sha256: "7586e476d70caecaf1686d21eee7247ea43ef5c345eab9e0cc3583ff13378d78"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.1"
   equatable:
     dependency: transitive
     description:
@@ -157,10 +181,10 @@ packages:
     dependency: "direct main"
     description:
       name: fl_chart
-      sha256: "00b74ae680df6b1135bdbea00a7d1fc072a9180b7c3f3702e4b19a9943f5ed7d"
+      sha256: "577aeac8ca414c25333334d7c4bb246775234c0e44b38b10a82b559dd4d764e7"
       url: "https://pub.dev"
     source: hosted
-    version: "0.66.2"
+    version: "1.0.0"
   flutter:
     dependency: "direct main"
     description: flutter
@@ -260,10 +284,10 @@ packages:
     dependency: transitive
     description:
       name: geocoding_ios
-      sha256: "43bde988312feb1a3cb6c3d514e9f4b04b564d1884fa56bd8241030bbb3bde36"
+      sha256: "18ab1c8369e2b0dcb3a8ccc907319334f35ee8cf4cfef4d9c8e23b13c65cb825"
       url: "https://pub.dev"
     source: hosted
-    version: "3.0.2"
+    version: "3.1.0"
   geocoding_platform_interface:
     dependency: transitive
     description:
@@ -324,10 +348,10 @@ packages:
     dependency: "direct main"
     description:
       name: google_fonts
-      sha256: b1ac0fe2832c9cc95e5e88b57d627c5e68c223b9657f4b96e1487aa9098c7b82
+      sha256: df9763500dadba0155373e9cb44e202ce21bd9ed5de6bdbd05c5854e86839cb8
       url: "https://pub.dev"
     source: hosted
-    version: "6.2.1"
+    version: "6.3.0"
   html:
     dependency: transitive
     description:
@@ -472,6 +496,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.16.0"
+  mime:
+    dependency: transitive
+    description:
+      name: mime
+      sha256: "41a20518f0cb1256669420fdba0cd90d21561e560ac240f26ef8322e45bb7ed6"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.0"
   nested:
     dependency: transitive
     description:
@@ -480,6 +512,14 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "1.0.0"
+  nominatim_flutter:
+    dependency: "direct main"
+    description:
+      name: nominatim_flutter
+      sha256: "8b01a9e67ac2b7666675ee0a533d16f07c700ad00940042f189d56a45e8b2fb1"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.0.8"
   open_filex:
     dependency: "direct main"
     description:
@@ -668,10 +708,10 @@ packages:
     dependency: transitive
     description:
       name: shared_preferences_android
-      sha256: "20cbd561f743a342c76c151d6ddb93a9ce6005751e7aa458baad3858bfbfb6ac"
+      sha256: "5bcf0772a761b04f8c6bf814721713de6f3e5d9d89caf8d3fe031b02a342379e"
       url: "https://pub.dev"
     source: hosted
-    version: "2.4.10"
+    version: "2.4.11"
   shared_preferences_foundation:
     dependency: transitive
     description:
@@ -717,6 +757,14 @@ packages:
     description: flutter
     source: sdk
     version: "0.0.0"
+  smooth_page_indicator:
+    dependency: "direct main"
+    description:
+      name: smooth_page_indicator
+      sha256: b21ebb8bc39cf72d11c7cfd809162a48c3800668ced1c9da3aade13a32cf6c1c
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.1"
   source_span:
     dependency: transitive
     description:
@@ -809,10 +857,10 @@ packages:
     dependency: transitive
     description:
       name: url_launcher_android
-      sha256: "8582d7f6fe14d2652b4c45c9b6c14c0b678c2af2d083a11b604caeba51930d79"
+      sha256: "0aedad096a85b49df2e4725fa32118f9fa580f3b14af7a2d2221896a02cd5656"
       url: "https://pub.dev"
     source: hosted
-    version: "6.3.16"
+    version: "6.3.17"
   url_launcher_ios:
     dependency: transitive
     description:
diff --git a/pubspec.yaml b/pubspec.yaml
index 560ead1..b42ae06 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -37,7 +37,7 @@ dependencies:
   geolocator: ^11.0.0
   provider: ^6.1.1
   geocoding: ^4.0.0
-  fl_chart: ^0.66.0
+  fl_chart: ^1.0.0
   shared_preferences: ^2.2.0
   package_info_plus: ^8.0.2
   path_provider: ^2.1.4
@@ -47,7 +47,7 @@ dependencies:
   csv: ^6.0.0
   flutter_launcher_icons: ^0.13.1
   flutter_native_splash: ^2.3.11
-  weather_icons: 3.0.0
+  weather_icons: ^3.0.0
   material_design_icons_flutter: ^6.0.952
   flutter_timezone: 4.1.1
   intl: ^0.20.2
@@ -57,6 +57,8 @@ dependencies:
   retry: ^3.1.2
   location: ^5.0.0
   url_launcher: ^6.1.5
+  smooth_page_indicator: ^1.1.0
+  nominatim_flutter: ^0.0.7
 
 
 flutter_launcher_icons:
@@ -123,5 +125,9 @@ flutter:
   #       - asset: fonts/TrajanPro_Bold.ttf
   #         weight: 700
   #
+  fonts:
+    - family: WeatherIcons
+      fonts:
+        - asset: packages/weather_icons/fonts/weathericons-regular-webfont.ttf
   # For details regarding fonts from package dependencies,
   # see https://flutter.dev/to/font-from-package
